// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	relation "github.com/odpf/shield/core/relation"
	mock "github.com/stretchr/testify/mock"
)

// RelationService is an autogenerated mock type for the RelationService type
type RelationService struct {
	mock.Mock
}

type RelationService_Expecter struct {
	mock *mock.Mock
}

func (_m *RelationService) EXPECT() *RelationService_Expecter {
	return &RelationService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *RelationService) Create(ctx context.Context, _a1 relation.Relation) (relation.Relation, error) {
	ret := _m.Called(ctx, _a1)

	var r0 relation.Relation
	if rf, ok := ret.Get(0).(func(context.Context, relation.Relation) relation.Relation); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(relation.Relation)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, relation.Relation) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RelationService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RelationService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - ctx context.Context
//  - _a1 relation.Relation
func (_e *RelationService_Expecter) Create(ctx interface{}, _a1 interface{}) *RelationService_Create_Call {
	return &RelationService_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *RelationService_Create_Call) Run(run func(ctx context.Context, _a1 relation.Relation)) *RelationService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(relation.Relation))
	})
	return _c
}

func (_c *RelationService_Create_Call) Return(_a0 relation.Relation, _a1 error) *RelationService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *RelationService) Get(ctx context.Context, id string) (relation.Relation, error) {
	ret := _m.Called(ctx, id)

	var r0 relation.Relation
	if rf, ok := ret.Get(0).(func(context.Context, string) relation.Relation); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(relation.Relation)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RelationService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RelationService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - id string
func (_e *RelationService_Expecter) Get(ctx interface{}, id interface{}) *RelationService_Get_Call {
	return &RelationService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *RelationService_Get_Call) Run(run func(ctx context.Context, id string)) *RelationService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RelationService_Get_Call) Return(_a0 relation.Relation, _a1 error) *RelationService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *RelationService) List(ctx context.Context) ([]relation.Relation, error) {
	ret := _m.Called(ctx)

	var r0 []relation.Relation
	if rf, ok := ret.Get(0).(func(context.Context) []relation.Relation); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]relation.Relation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RelationService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type RelationService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//  - ctx context.Context
func (_e *RelationService_Expecter) List(ctx interface{}) *RelationService_List_Call {
	return &RelationService_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *RelationService_List_Call) Run(run func(ctx context.Context)) *RelationService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RelationService_List_Call) Return(_a0 []relation.Relation, _a1 error) *RelationService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *RelationService) Update(ctx context.Context, _a1 relation.Relation) (relation.Relation, error) {
	ret := _m.Called(ctx, _a1)

	var r0 relation.Relation
	if rf, ok := ret.Get(0).(func(context.Context, relation.Relation) relation.Relation); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(relation.Relation)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, relation.Relation) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RelationService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RelationService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - ctx context.Context
//  - _a1 relation.Relation
func (_e *RelationService_Expecter) Update(ctx interface{}, _a1 interface{}) *RelationService_Update_Call {
	return &RelationService_Update_Call{Call: _e.mock.On("Update", ctx, _a1)}
}

func (_c *RelationService_Update_Call) Run(run func(ctx context.Context, _a1 relation.Relation)) *RelationService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(relation.Relation))
	})
	return _c
}

func (_c *RelationService_Update_Call) Return(_a0 relation.Relation, _a1 error) *RelationService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewRelationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewRelationService creates a new instance of RelationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRelationService(t mockConstructorTestingTNewRelationService) *RelationService {
	mock := &RelationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
