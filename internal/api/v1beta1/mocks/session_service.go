// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	authenticate "github.com/odpf/shield/core/authenticate"

	mock "github.com/stretchr/testify/mock"

	user "github.com/odpf/shield/core/user"

	uuid "github.com/google/uuid"
)

// SessionService is an autogenerated mock type for the SessionService type
type SessionService struct {
	mock.Mock
}

type SessionService_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionService) EXPECT() *SessionService_Expecter {
	return &SessionService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *SessionService) Create(_a0 user.User) (*authenticate.Session, error) {
	ret := _m.Called(_a0)

	var r0 *authenticate.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(user.User) (*authenticate.Session, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(user.User) *authenticate.Session); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authenticate.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SessionService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 user.User
func (_e *SessionService_Expecter) Create(_a0 interface{}) *SessionService_Create_Call {
	return &SessionService_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *SessionService_Create_Call) Run(run func(_a0 user.User)) *SessionService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(user.User))
	})
	return _c
}

func (_c *SessionService_Create_Call) Return(_a0 *authenticate.Session, _a1 error) *SessionService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionService_Create_Call) RunAndReturn(run func(user.User) (*authenticate.Session, error)) *SessionService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: sessionID
func (_m *SessionService) Delete(sessionID uuid.UUID) error {
	ret := _m.Called(sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type SessionService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - sessionID uuid.UUID
func (_e *SessionService_Expecter) Delete(sessionID interface{}) *SessionService_Delete_Call {
	return &SessionService_Delete_Call{Call: _e.mock.On("Delete", sessionID)}
}

func (_c *SessionService_Delete_Call) Run(run func(sessionID uuid.UUID)) *SessionService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *SessionService_Delete_Call) Return(_a0 error) *SessionService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionService_Delete_Call) RunAndReturn(run func(uuid.UUID) error) *SessionService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractFromMD provides a mock function with given fields: ctx
func (_m *SessionService) ExtractFromMD(ctx context.Context) (*authenticate.Session, error) {
	ret := _m.Called(ctx)

	var r0 *authenticate.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*authenticate.Session, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *authenticate.Session); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authenticate.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionService_ExtractFromMD_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractFromMD'
type SessionService_ExtractFromMD_Call struct {
	*mock.Call
}

// ExtractFromMD is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SessionService_Expecter) ExtractFromMD(ctx interface{}) *SessionService_ExtractFromMD_Call {
	return &SessionService_ExtractFromMD_Call{Call: _e.mock.On("ExtractFromMD", ctx)}
}

func (_c *SessionService_ExtractFromMD_Call) Run(run func(ctx context.Context)) *SessionService_ExtractFromMD_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SessionService_ExtractFromMD_Call) Return(_a0 *authenticate.Session, _a1 error) *SessionService_ExtractFromMD_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionService_ExtractFromMD_Call) RunAndReturn(run func(context.Context) (*authenticate.Session, error)) *SessionService_ExtractFromMD_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewSessionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionService creates a new instance of SessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionService(t mockConstructorTestingTNewSessionService) *SessionService {
	mock := &SessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
