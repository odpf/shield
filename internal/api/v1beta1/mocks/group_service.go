// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	group "github.com/odpf/shield/core/group"
	mock "github.com/stretchr/testify/mock"

	user "github.com/odpf/shield/core/user"
)

// GroupService is an autogenerated mock type for the GroupService type
type GroupService struct {
	mock.Mock
}

type GroupService_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupService) EXPECT() *GroupService_Expecter {
	return &GroupService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, grp
func (_m *GroupService) Create(ctx context.Context, grp group.Group) (group.Group, error) {
	ret := _m.Called(ctx, grp)

	var r0 group.Group
	if rf, ok := ret.Get(0).(func(context.Context, group.Group) group.Group); ok {
		r0 = rf(ctx, grp)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, group.Group) error); ok {
		r1 = rf(ctx, grp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type GroupService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - ctx context.Context
//  - grp group.Group
func (_e *GroupService_Expecter) Create(ctx interface{}, grp interface{}) *GroupService_Create_Call {
	return &GroupService_Create_Call{Call: _e.mock.On("Create", ctx, grp)}
}

func (_c *GroupService_Create_Call) Run(run func(ctx context.Context, grp group.Group)) *GroupService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(group.Group))
	})
	return _c
}

func (_c *GroupService_Create_Call) Return(_a0 group.Group, _a1 error) *GroupService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *GroupService) Get(ctx context.Context, id string) (group.Group, error) {
	ret := _m.Called(ctx, id)

	var r0 group.Group
	if rf, ok := ret.Get(0).(func(context.Context, string) group.Group); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type GroupService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - id string
func (_e *GroupService_Expecter) Get(ctx interface{}, id interface{}) *GroupService_Get_Call {
	return &GroupService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *GroupService_Get_Call) Run(run func(ctx context.Context, id string)) *GroupService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupService_Get_Call) Return(_a0 group.Group, _a1 error) *GroupService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// List provides a mock function with given fields: ctx, flt
func (_m *GroupService) List(ctx context.Context, flt group.Filter) ([]group.Group, error) {
	ret := _m.Called(ctx, flt)

	var r0 []group.Group
	if rf, ok := ret.Get(0).(func(context.Context, group.Filter) []group.Group); ok {
		r0 = rf(ctx, flt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]group.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, group.Filter) error); ok {
		r1 = rf(ctx, flt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type GroupService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//  - ctx context.Context
//  - flt group.Filter
func (_e *GroupService_Expecter) List(ctx interface{}, flt interface{}) *GroupService_List_Call {
	return &GroupService_List_Call{Call: _e.mock.On("List", ctx, flt)}
}

func (_c *GroupService_List_Call) Run(run func(ctx context.Context, flt group.Filter)) *GroupService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(group.Filter))
	})
	return _c
}

func (_c *GroupService_List_Call) Return(_a0 []group.Group, _a1 error) *GroupService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListGroupRelations provides a mock function with given fields: ctx, objectId, subjectType, role
func (_m *GroupService) ListGroupRelations(ctx context.Context, objectId string, subjectType string, role string) ([]user.User, []group.Group, map[string][]string, map[string][]string, error) {
	ret := _m.Called(ctx, objectId, subjectType, role)

	var r0 []user.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []user.User); ok {
		r0 = rf(ctx, objectId, subjectType, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	var r1 []group.Group
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) []group.Group); ok {
		r1 = rf(ctx, objectId, subjectType, role)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]group.Group)
		}
	}

	var r2 map[string][]string
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) map[string][]string); ok {
		r2 = rf(ctx, objectId, subjectType, role)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(map[string][]string)
		}
	}

	var r3 map[string][]string
	if rf, ok := ret.Get(3).(func(context.Context, string, string, string) map[string][]string); ok {
		r3 = rf(ctx, objectId, subjectType, role)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(map[string][]string)
		}
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(context.Context, string, string, string) error); ok {
		r4 = rf(ctx, objectId, subjectType, role)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// GroupService_ListGroupRelations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupRelations'
type GroupService_ListGroupRelations_Call struct {
	*mock.Call
}

// ListGroupRelations is a helper method to define mock.On call
//  - ctx context.Context
//  - objectId string
//  - subjectType string
//  - role string
func (_e *GroupService_Expecter) ListGroupRelations(ctx interface{}, objectId interface{}, subjectType interface{}, role interface{}) *GroupService_ListGroupRelations_Call {
	return &GroupService_ListGroupRelations_Call{Call: _e.mock.On("ListGroupRelations", ctx, objectId, subjectType, role)}
}

func (_c *GroupService_ListGroupRelations_Call) Run(run func(ctx context.Context, objectId string, subjectType string, role string)) *GroupService_ListGroupRelations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *GroupService_ListGroupRelations_Call) Return(_a0 []user.User, _a1 []group.Group, _a2 map[string][]string, _a3 map[string][]string, _a4 error) *GroupService_ListGroupRelations_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3, _a4)
	return _c
}

// ListUserGroups provides a mock function with given fields: ctx, userId, roleId
func (_m *GroupService) ListUserGroups(ctx context.Context, userId string, roleId string) ([]group.Group, error) {
	ret := _m.Called(ctx, userId, roleId)

	var r0 []group.Group
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []group.Group); ok {
		r0 = rf(ctx, userId, roleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]group.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userId, roleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_ListUserGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserGroups'
type GroupService_ListUserGroups_Call struct {
	*mock.Call
}

// ListUserGroups is a helper method to define mock.On call
//  - ctx context.Context
//  - userId string
//  - roleId string
func (_e *GroupService_Expecter) ListUserGroups(ctx interface{}, userId interface{}, roleId interface{}) *GroupService_ListUserGroups_Call {
	return &GroupService_ListUserGroups_Call{Call: _e.mock.On("ListUserGroups", ctx, userId, roleId)}
}

func (_c *GroupService_ListUserGroups_Call) Run(run func(ctx context.Context, userId string, roleId string)) *GroupService_ListUserGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GroupService_ListUserGroups_Call) Return(_a0 []group.Group, _a1 error) *GroupService_ListUserGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, grp
func (_m *GroupService) Update(ctx context.Context, grp group.Group) (group.Group, error) {
	ret := _m.Called(ctx, grp)

	var r0 group.Group
	if rf, ok := ret.Get(0).(func(context.Context, group.Group) group.Group); ok {
		r0 = rf(ctx, grp)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, group.Group) error); ok {
		r1 = rf(ctx, grp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type GroupService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - ctx context.Context
//  - grp group.Group
func (_e *GroupService_Expecter) Update(ctx interface{}, grp interface{}) *GroupService_Update_Call {
	return &GroupService_Update_Call{Call: _e.mock.On("Update", ctx, grp)}
}

func (_c *GroupService_Update_Call) Run(run func(ctx context.Context, grp group.Group)) *GroupService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(group.Group))
	})
	return _c
}

func (_c *GroupService_Update_Call) Return(_a0 group.Group, _a1 error) *GroupService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewGroupService interface {
	mock.TestingT
	Cleanup(func())
}

// NewGroupService creates a new instance of GroupService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGroupService(t mockConstructorTestingTNewGroupService) *GroupService {
	mock := &GroupService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
