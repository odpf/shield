// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	customer "github.com/raystack/frontier/billing/customer"
	mock "github.com/stretchr/testify/mock"
)

// CustomerService is an autogenerated mock type for the CustomerService type
type CustomerService struct {
	mock.Mock
}

type CustomerService_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomerService) EXPECT() *CustomerService_Expecter {
	return &CustomerService_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CustomerService) GetByID(ctx context.Context, id string) (customer.Customer, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 customer.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (customer.Customer, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) customer.Customer); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(customer.Customer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type CustomerService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *CustomerService_Expecter) GetByID(ctx interface{}, id interface{}) *CustomerService_GetByID_Call {
	return &CustomerService_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *CustomerService_GetByID_Call) Run(run func(ctx context.Context, id string)) *CustomerService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CustomerService_GetByID_Call) Return(_a0 customer.Customer, _a1 error) *CustomerService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerService_GetByID_Call) RunAndReturn(run func(context.Context, string) (customer.Customer, error)) *CustomerService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *CustomerService) List(ctx context.Context, filter customer.Filter) ([]customer.Customer, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []customer.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, customer.Filter) ([]customer.Customer, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, customer.Filter) []customer.Customer); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]customer.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, customer.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type CustomerService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter customer.Filter
func (_e *CustomerService_Expecter) List(ctx interface{}, filter interface{}) *CustomerService_List_Call {
	return &CustomerService_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *CustomerService_List_Call) Run(run func(ctx context.Context, filter customer.Filter)) *CustomerService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(customer.Filter))
	})
	return _c
}

func (_c *CustomerService_List_Call) Return(_a0 []customer.Customer, _a1 error) *CustomerService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerService_List_Call) RunAndReturn(run func(context.Context, customer.Filter) ([]customer.Customer, error)) *CustomerService_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewCustomerService creates a new instance of CustomerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerService {
	mock := &CustomerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
