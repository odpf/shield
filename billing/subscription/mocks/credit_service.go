// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	credit "github.com/raystack/frontier/billing/credit"
	mock "github.com/stretchr/testify/mock"
)

// CreditService is an autogenerated mock type for the CreditService type
type CreditService struct {
	mock.Mock
}

type CreditService_Expecter struct {
	mock *mock.Mock
}

func (_m *CreditService) EXPECT() *CreditService_Expecter {
	return &CreditService_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, cred
func (_m *CreditService) Add(ctx context.Context, cred credit.Credit) error {
	ret := _m.Called(ctx, cred)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, credit.Credit) error); ok {
		r0 = rf(ctx, cred)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreditService_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type CreditService_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - cred credit.Credit
func (_e *CreditService_Expecter) Add(ctx interface{}, cred interface{}) *CreditService_Add_Call {
	return &CreditService_Add_Call{Call: _e.mock.On("Add", ctx, cred)}
}

func (_c *CreditService_Add_Call) Run(run func(ctx context.Context, cred credit.Credit)) *CreditService_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(credit.Credit))
	})
	return _c
}

func (_c *CreditService_Add_Call) Return(_a0 error) *CreditService_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CreditService_Add_Call) RunAndReturn(run func(context.Context, credit.Credit) error) *CreditService_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CreditService) GetByID(ctx context.Context, id string) (credit.Transaction, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 credit.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (credit.Transaction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) credit.Transaction); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(credit.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreditService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type CreditService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *CreditService_Expecter) GetByID(ctx interface{}, id interface{}) *CreditService_GetByID_Call {
	return &CreditService_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *CreditService_GetByID_Call) Run(run func(ctx context.Context, id string)) *CreditService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CreditService_GetByID_Call) Return(_a0 credit.Transaction, _a1 error) *CreditService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CreditService_GetByID_Call) RunAndReturn(run func(context.Context, string) (credit.Transaction, error)) *CreditService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewCreditService creates a new instance of CreditService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreditService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreditService {
	mock := &CreditService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
