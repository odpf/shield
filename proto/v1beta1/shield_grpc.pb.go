// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: odpf/shield/v1beta1/shield.proto

package shieldv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShieldService_ListUsers_FullMethodName                     = "/odpf.shield.v1beta1.ShieldService/ListUsers"
	ShieldService_CreateUser_FullMethodName                    = "/odpf.shield.v1beta1.ShieldService/CreateUser"
	ShieldService_GetUser_FullMethodName                       = "/odpf.shield.v1beta1.ShieldService/GetUser"
	ShieldService_ListUserGroups_FullMethodName                = "/odpf.shield.v1beta1.ShieldService/ListUserGroups"
	ShieldService_ListCurrentUserGroups_FullMethodName         = "/odpf.shield.v1beta1.ShieldService/ListCurrentUserGroups"
	ShieldService_GetCurrentUser_FullMethodName                = "/odpf.shield.v1beta1.ShieldService/GetCurrentUser"
	ShieldService_UpdateUser_FullMethodName                    = "/odpf.shield.v1beta1.ShieldService/UpdateUser"
	ShieldService_UpdateCurrentUser_FullMethodName             = "/odpf.shield.v1beta1.ShieldService/UpdateCurrentUser"
	ShieldService_EnableUser_FullMethodName                    = "/odpf.shield.v1beta1.ShieldService/EnableUser"
	ShieldService_DisableUser_FullMethodName                   = "/odpf.shield.v1beta1.ShieldService/DisableUser"
	ShieldService_DeleteUser_FullMethodName                    = "/odpf.shield.v1beta1.ShieldService/DeleteUser"
	ShieldService_GetOrganizationsByUser_FullMethodName        = "/odpf.shield.v1beta1.ShieldService/GetOrganizationsByUser"
	ShieldService_GetOrganizationsByCurrentUser_FullMethodName = "/odpf.shield.v1beta1.ShieldService/GetOrganizationsByCurrentUser"
	ShieldService_ListOrganizationGroups_FullMethodName        = "/odpf.shield.v1beta1.ShieldService/ListOrganizationGroups"
	ShieldService_CreateGroup_FullMethodName                   = "/odpf.shield.v1beta1.ShieldService/CreateGroup"
	ShieldService_GetGroup_FullMethodName                      = "/odpf.shield.v1beta1.ShieldService/GetGroup"
	ShieldService_UpdateGroup_FullMethodName                   = "/odpf.shield.v1beta1.ShieldService/UpdateGroup"
	ShieldService_ListGroupUsers_FullMethodName                = "/odpf.shield.v1beta1.ShieldService/ListGroupUsers"
	ShieldService_AddGroupUsers_FullMethodName                 = "/odpf.shield.v1beta1.ShieldService/AddGroupUsers"
	ShieldService_RemoveGroupUser_FullMethodName               = "/odpf.shield.v1beta1.ShieldService/RemoveGroupUser"
	ShieldService_EnableGroup_FullMethodName                   = "/odpf.shield.v1beta1.ShieldService/EnableGroup"
	ShieldService_DisableGroup_FullMethodName                  = "/odpf.shield.v1beta1.ShieldService/DisableGroup"
	ShieldService_DeleteGroup_FullMethodName                   = "/odpf.shield.v1beta1.ShieldService/DeleteGroup"
	ShieldService_ListRoles_FullMethodName                     = "/odpf.shield.v1beta1.ShieldService/ListRoles"
	ShieldService_ListOrganizationRoles_FullMethodName         = "/odpf.shield.v1beta1.ShieldService/ListOrganizationRoles"
	ShieldService_CreateOrganizationRole_FullMethodName        = "/odpf.shield.v1beta1.ShieldService/CreateOrganizationRole"
	ShieldService_GetOrganizationRole_FullMethodName           = "/odpf.shield.v1beta1.ShieldService/GetOrganizationRole"
	ShieldService_UpdateOrganizationRole_FullMethodName        = "/odpf.shield.v1beta1.ShieldService/UpdateOrganizationRole"
	ShieldService_DeleteOrganizationRole_FullMethodName        = "/odpf.shield.v1beta1.ShieldService/DeleteOrganizationRole"
	ShieldService_ListOrganizations_FullMethodName             = "/odpf.shield.v1beta1.ShieldService/ListOrganizations"
	ShieldService_CreateOrganization_FullMethodName            = "/odpf.shield.v1beta1.ShieldService/CreateOrganization"
	ShieldService_GetOrganization_FullMethodName               = "/odpf.shield.v1beta1.ShieldService/GetOrganization"
	ShieldService_UpdateOrganization_FullMethodName            = "/odpf.shield.v1beta1.ShieldService/UpdateOrganization"
	ShieldService_ListOrganizationProjects_FullMethodName      = "/odpf.shield.v1beta1.ShieldService/ListOrganizationProjects"
	ShieldService_ListOrganizationAdmins_FullMethodName        = "/odpf.shield.v1beta1.ShieldService/ListOrganizationAdmins"
	ShieldService_ListOrganizationUsers_FullMethodName         = "/odpf.shield.v1beta1.ShieldService/ListOrganizationUsers"
	ShieldService_AddOrganizationUsers_FullMethodName          = "/odpf.shield.v1beta1.ShieldService/AddOrganizationUsers"
	ShieldService_RemoveOrganizationUser_FullMethodName        = "/odpf.shield.v1beta1.ShieldService/RemoveOrganizationUser"
	ShieldService_ListOrganizationInvitations_FullMethodName   = "/odpf.shield.v1beta1.ShieldService/ListOrganizationInvitations"
	ShieldService_CreateOrganizationInvitation_FullMethodName  = "/odpf.shield.v1beta1.ShieldService/CreateOrganizationInvitation"
	ShieldService_GetOrganizationInvitation_FullMethodName     = "/odpf.shield.v1beta1.ShieldService/GetOrganizationInvitation"
	ShieldService_AcceptOrganizationInvitation_FullMethodName  = "/odpf.shield.v1beta1.ShieldService/AcceptOrganizationInvitation"
	ShieldService_DeleteOrganizationInvitation_FullMethodName  = "/odpf.shield.v1beta1.ShieldService/DeleteOrganizationInvitation"
	ShieldService_EnableOrganization_FullMethodName            = "/odpf.shield.v1beta1.ShieldService/EnableOrganization"
	ShieldService_DisableOrganization_FullMethodName           = "/odpf.shield.v1beta1.ShieldService/DisableOrganization"
	ShieldService_DeleteOrganization_FullMethodName            = "/odpf.shield.v1beta1.ShieldService/DeleteOrganization"
	ShieldService_CreateProject_FullMethodName                 = "/odpf.shield.v1beta1.ShieldService/CreateProject"
	ShieldService_GetProject_FullMethodName                    = "/odpf.shield.v1beta1.ShieldService/GetProject"
	ShieldService_UpdateProject_FullMethodName                 = "/odpf.shield.v1beta1.ShieldService/UpdateProject"
	ShieldService_ListProjectAdmins_FullMethodName             = "/odpf.shield.v1beta1.ShieldService/ListProjectAdmins"
	ShieldService_ListProjectUsers_FullMethodName              = "/odpf.shield.v1beta1.ShieldService/ListProjectUsers"
	ShieldService_EnableProject_FullMethodName                 = "/odpf.shield.v1beta1.ShieldService/EnableProject"
	ShieldService_DisableProject_FullMethodName                = "/odpf.shield.v1beta1.ShieldService/DisableProject"
	ShieldService_DeleteProject_FullMethodName                 = "/odpf.shield.v1beta1.ShieldService/DeleteProject"
	ShieldService_CreatePolicy_FullMethodName                  = "/odpf.shield.v1beta1.ShieldService/CreatePolicy"
	ShieldService_GetPolicy_FullMethodName                     = "/odpf.shield.v1beta1.ShieldService/GetPolicy"
	ShieldService_UpdatePolicy_FullMethodName                  = "/odpf.shield.v1beta1.ShieldService/UpdatePolicy"
	ShieldService_DeletePolicy_FullMethodName                  = "/odpf.shield.v1beta1.ShieldService/DeletePolicy"
	ShieldService_CreateRelation_FullMethodName                = "/odpf.shield.v1beta1.ShieldService/CreateRelation"
	ShieldService_GetRelation_FullMethodName                   = "/odpf.shield.v1beta1.ShieldService/GetRelation"
	ShieldService_DeleteRelation_FullMethodName                = "/odpf.shield.v1beta1.ShieldService/DeleteRelation"
	ShieldService_ListPermissions_FullMethodName               = "/odpf.shield.v1beta1.ShieldService/ListPermissions"
	ShieldService_GetPermission_FullMethodName                 = "/odpf.shield.v1beta1.ShieldService/GetPermission"
	ShieldService_ListNamespaces_FullMethodName                = "/odpf.shield.v1beta1.ShieldService/ListNamespaces"
	ShieldService_GetNamespace_FullMethodName                  = "/odpf.shield.v1beta1.ShieldService/GetNamespace"
	ShieldService_ListProjectResources_FullMethodName          = "/odpf.shield.v1beta1.ShieldService/ListProjectResources"
	ShieldService_CreateProjectResource_FullMethodName         = "/odpf.shield.v1beta1.ShieldService/CreateProjectResource"
	ShieldService_GetProjectResource_FullMethodName            = "/odpf.shield.v1beta1.ShieldService/GetProjectResource"
	ShieldService_UpdateProjectResource_FullMethodName         = "/odpf.shield.v1beta1.ShieldService/UpdateProjectResource"
	ShieldService_DeleteProjectResource_FullMethodName         = "/odpf.shield.v1beta1.ShieldService/DeleteProjectResource"
	ShieldService_CheckResourcePermission_FullMethodName       = "/odpf.shield.v1beta1.ShieldService/CheckResourcePermission"
	ShieldService_ListAuthStrategies_FullMethodName            = "/odpf.shield.v1beta1.ShieldService/ListAuthStrategies"
	ShieldService_Authenticate_FullMethodName                  = "/odpf.shield.v1beta1.ShieldService/Authenticate"
	ShieldService_AuthCallback_FullMethodName                  = "/odpf.shield.v1beta1.ShieldService/AuthCallback"
	ShieldService_AuthLogout_FullMethodName                    = "/odpf.shield.v1beta1.ShieldService/AuthLogout"
	ShieldService_ListMetaSchemas_FullMethodName               = "/odpf.shield.v1beta1.ShieldService/ListMetaSchemas"
	ShieldService_CreateMetaSchema_FullMethodName              = "/odpf.shield.v1beta1.ShieldService/CreateMetaSchema"
	ShieldService_GetMetaSchema_FullMethodName                 = "/odpf.shield.v1beta1.ShieldService/GetMetaSchema"
	ShieldService_UpdateMetaSchema_FullMethodName              = "/odpf.shield.v1beta1.ShieldService/UpdateMetaSchema"
	ShieldService_DeleteMetaSchema_FullMethodName              = "/odpf.shield.v1beta1.ShieldService/DeleteMetaSchema"
)

// ShieldServiceClient is the client API for ShieldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShieldServiceClient interface {
	// Users
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	ListUserGroups(ctx context.Context, in *ListUserGroupsRequest, opts ...grpc.CallOption) (*ListUserGroupsResponse, error)
	ListCurrentUserGroups(ctx context.Context, in *ListCurrentUserGroupsRequest, opts ...grpc.CallOption) (*ListCurrentUserGroupsResponse, error)
	GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*GetCurrentUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	UpdateCurrentUser(ctx context.Context, in *UpdateCurrentUserRequest, opts ...grpc.CallOption) (*UpdateCurrentUserResponse, error)
	EnableUser(ctx context.Context, in *EnableUserRequest, opts ...grpc.CallOption) (*EnableUserResponse, error)
	DisableUser(ctx context.Context, in *DisableUserRequest, opts ...grpc.CallOption) (*DisableUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	GetOrganizationsByUser(ctx context.Context, in *GetOrganizationsByUserRequest, opts ...grpc.CallOption) (*GetOrganizationsByUserResponse, error)
	GetOrganizationsByCurrentUser(ctx context.Context, in *GetOrganizationsByCurrentUserRequest, opts ...grpc.CallOption) (*GetOrganizationsByCurrentUserResponse, error)
	// Group
	ListOrganizationGroups(ctx context.Context, in *ListOrganizationGroupsRequest, opts ...grpc.CallOption) (*ListOrganizationGroupsResponse, error)
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error)
	ListGroupUsers(ctx context.Context, in *ListGroupUsersRequest, opts ...grpc.CallOption) (*ListGroupUsersResponse, error)
	AddGroupUsers(ctx context.Context, in *AddGroupUsersRequest, opts ...grpc.CallOption) (*AddGroupUsersResponse, error)
	RemoveGroupUser(ctx context.Context, in *RemoveGroupUserRequest, opts ...grpc.CallOption) (*RemoveGroupUserResponse, error)
	EnableGroup(ctx context.Context, in *EnableGroupRequest, opts ...grpc.CallOption) (*EnableGroupResponse, error)
	DisableGroup(ctx context.Context, in *DisableGroupRequest, opts ...grpc.CallOption) (*DisableGroupResponse, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	// Roles
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	ListOrganizationRoles(ctx context.Context, in *ListOrganizationRolesRequest, opts ...grpc.CallOption) (*ListOrganizationRolesResponse, error)
	CreateOrganizationRole(ctx context.Context, in *CreateOrganizationRoleRequest, opts ...grpc.CallOption) (*CreateOrganizationRoleResponse, error)
	GetOrganizationRole(ctx context.Context, in *GetOrganizationRoleRequest, opts ...grpc.CallOption) (*GetOrganizationRoleResponse, error)
	UpdateOrganizationRole(ctx context.Context, in *UpdateOrganizationRoleRequest, opts ...grpc.CallOption) (*UpdateOrganizationRoleResponse, error)
	DeleteOrganizationRole(ctx context.Context, in *DeleteOrganizationRoleRequest, opts ...grpc.CallOption) (*DeleteOrganizationRoleResponse, error)
	// Organizations
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	ListOrganizationProjects(ctx context.Context, in *ListOrganizationProjectsRequest, opts ...grpc.CallOption) (*ListOrganizationProjectsResponse, error)
	ListOrganizationAdmins(ctx context.Context, in *ListOrganizationAdminsRequest, opts ...grpc.CallOption) (*ListOrganizationAdminsResponse, error)
	ListOrganizationUsers(ctx context.Context, in *ListOrganizationUsersRequest, opts ...grpc.CallOption) (*ListOrganizationUsersResponse, error)
	AddOrganizationUsers(ctx context.Context, in *AddOrganizationUsersRequest, opts ...grpc.CallOption) (*AddOrganizationUsersResponse, error)
	RemoveOrganizationUser(ctx context.Context, in *RemoveOrganizationUserRequest, opts ...grpc.CallOption) (*RemoveOrganizationUserResponse, error)
	ListOrganizationInvitations(ctx context.Context, in *ListOrganizationInvitationsRequest, opts ...grpc.CallOption) (*ListOrganizationInvitationsResponse, error)
	CreateOrganizationInvitation(ctx context.Context, in *CreateOrganizationInvitationRequest, opts ...grpc.CallOption) (*CreateOrganizationInvitationResponse, error)
	GetOrganizationInvitation(ctx context.Context, in *GetOrganizationInvitationRequest, opts ...grpc.CallOption) (*GetOrganizationInvitationResponse, error)
	AcceptOrganizationInvitation(ctx context.Context, in *AcceptOrganizationInvitationRequest, opts ...grpc.CallOption) (*AcceptOrganizationInvitationResponse, error)
	DeleteOrganizationInvitation(ctx context.Context, in *DeleteOrganizationInvitationRequest, opts ...grpc.CallOption) (*DeleteOrganizationInvitationResponse, error)
	EnableOrganization(ctx context.Context, in *EnableOrganizationRequest, opts ...grpc.CallOption) (*EnableOrganizationResponse, error)
	DisableOrganization(ctx context.Context, in *DisableOrganizationRequest, opts ...grpc.CallOption) (*DisableOrganizationResponse, error)
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// Projects
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	ListProjectAdmins(ctx context.Context, in *ListProjectAdminsRequest, opts ...grpc.CallOption) (*ListProjectAdminsResponse, error)
	ListProjectUsers(ctx context.Context, in *ListProjectUsersRequest, opts ...grpc.CallOption) (*ListProjectUsersResponse, error)
	EnableProject(ctx context.Context, in *EnableProjectRequest, opts ...grpc.CallOption) (*EnableProjectResponse, error)
	DisableProject(ctx context.Context, in *DisableProjectRequest, opts ...grpc.CallOption) (*DisableProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	// Policies
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error)
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error)
	// Relations
	CreateRelation(ctx context.Context, in *CreateRelationRequest, opts ...grpc.CallOption) (*CreateRelationResponse, error)
	GetRelation(ctx context.Context, in *GetRelationRequest, opts ...grpc.CallOption) (*GetRelationResponse, error)
	DeleteRelation(ctx context.Context, in *DeleteRelationRequest, opts ...grpc.CallOption) (*DeleteRelationResponse, error)
	// Permissions
	ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error)
	// Namespaces
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	// Resources
	ListProjectResources(ctx context.Context, in *ListProjectResourcesRequest, opts ...grpc.CallOption) (*ListProjectResourcesResponse, error)
	CreateProjectResource(ctx context.Context, in *CreateProjectResourceRequest, opts ...grpc.CallOption) (*CreateProjectResourceResponse, error)
	GetProjectResource(ctx context.Context, in *GetProjectResourceRequest, opts ...grpc.CallOption) (*GetProjectResourceResponse, error)
	UpdateProjectResource(ctx context.Context, in *UpdateProjectResourceRequest, opts ...grpc.CallOption) (*UpdateProjectResourceResponse, error)
	DeleteProjectResource(ctx context.Context, in *DeleteProjectResourceRequest, opts ...grpc.CallOption) (*DeleteProjectResourceResponse, error)
	// Authz
	CheckResourcePermission(ctx context.Context, in *CheckResourcePermissionRequest, opts ...grpc.CallOption) (*CheckResourcePermissionResponse, error)
	// Authn
	ListAuthStrategies(ctx context.Context, in *ListAuthStrategiesRequest, opts ...grpc.CallOption) (*ListAuthStrategiesResponse, error)
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	AuthCallback(ctx context.Context, in *AuthCallbackRequest, opts ...grpc.CallOption) (*AuthCallbackResponse, error)
	AuthLogout(ctx context.Context, in *AuthLogoutRequest, opts ...grpc.CallOption) (*AuthLogoutResponse, error)
	// MetaSchemas
	ListMetaSchemas(ctx context.Context, in *ListMetaSchemasRequest, opts ...grpc.CallOption) (*ListMetaSchemasResponse, error)
	CreateMetaSchema(ctx context.Context, in *CreateMetaSchemaRequest, opts ...grpc.CallOption) (*CreateMetaSchemaResponse, error)
	GetMetaSchema(ctx context.Context, in *GetMetaSchemaRequest, opts ...grpc.CallOption) (*GetMetaSchemaResponse, error)
	UpdateMetaSchema(ctx context.Context, in *UpdateMetaSchemaRequest, opts ...grpc.CallOption) (*UpdateMetaSchemaResponse, error)
	DeleteMetaSchema(ctx context.Context, in *DeleteMetaSchemaRequest, opts ...grpc.CallOption) (*DeleteMetaSchemaResponse, error)
}

type shieldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShieldServiceClient(cc grpc.ClientConnInterface) ShieldServiceClient {
	return &shieldServiceClient{cc}
}

func (c *shieldServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, ShieldService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListUserGroups(ctx context.Context, in *ListUserGroupsRequest, opts ...grpc.CallOption) (*ListUserGroupsResponse, error) {
	out := new(ListUserGroupsResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListUserGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListCurrentUserGroups(ctx context.Context, in *ListCurrentUserGroupsRequest, opts ...grpc.CallOption) (*ListCurrentUserGroupsResponse, error) {
	out := new(ListCurrentUserGroupsResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListCurrentUserGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*GetCurrentUserResponse, error) {
	out := new(GetCurrentUserResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetCurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, ShieldService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) UpdateCurrentUser(ctx context.Context, in *UpdateCurrentUserRequest, opts ...grpc.CallOption) (*UpdateCurrentUserResponse, error) {
	out := new(UpdateCurrentUserResponse)
	err := c.cc.Invoke(ctx, ShieldService_UpdateCurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) EnableUser(ctx context.Context, in *EnableUserRequest, opts ...grpc.CallOption) (*EnableUserResponse, error) {
	out := new(EnableUserResponse)
	err := c.cc.Invoke(ctx, ShieldService_EnableUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) DisableUser(ctx context.Context, in *DisableUserRequest, opts ...grpc.CallOption) (*DisableUserResponse, error) {
	out := new(DisableUserResponse)
	err := c.cc.Invoke(ctx, ShieldService_DisableUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, ShieldService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetOrganizationsByUser(ctx context.Context, in *GetOrganizationsByUserRequest, opts ...grpc.CallOption) (*GetOrganizationsByUserResponse, error) {
	out := new(GetOrganizationsByUserResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetOrganizationsByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetOrganizationsByCurrentUser(ctx context.Context, in *GetOrganizationsByCurrentUserRequest, opts ...grpc.CallOption) (*GetOrganizationsByCurrentUserResponse, error) {
	out := new(GetOrganizationsByCurrentUserResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetOrganizationsByCurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListOrganizationGroups(ctx context.Context, in *ListOrganizationGroupsRequest, opts ...grpc.CallOption) (*ListOrganizationGroupsResponse, error) {
	out := new(ListOrganizationGroupsResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListOrganizationGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, ShieldService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error) {
	out := new(UpdateGroupResponse)
	err := c.cc.Invoke(ctx, ShieldService_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListGroupUsers(ctx context.Context, in *ListGroupUsersRequest, opts ...grpc.CallOption) (*ListGroupUsersResponse, error) {
	out := new(ListGroupUsersResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListGroupUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) AddGroupUsers(ctx context.Context, in *AddGroupUsersRequest, opts ...grpc.CallOption) (*AddGroupUsersResponse, error) {
	out := new(AddGroupUsersResponse)
	err := c.cc.Invoke(ctx, ShieldService_AddGroupUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) RemoveGroupUser(ctx context.Context, in *RemoveGroupUserRequest, opts ...grpc.CallOption) (*RemoveGroupUserResponse, error) {
	out := new(RemoveGroupUserResponse)
	err := c.cc.Invoke(ctx, ShieldService_RemoveGroupUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) EnableGroup(ctx context.Context, in *EnableGroupRequest, opts ...grpc.CallOption) (*EnableGroupResponse, error) {
	out := new(EnableGroupResponse)
	err := c.cc.Invoke(ctx, ShieldService_EnableGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) DisableGroup(ctx context.Context, in *DisableGroupRequest, opts ...grpc.CallOption) (*DisableGroupResponse, error) {
	out := new(DisableGroupResponse)
	err := c.cc.Invoke(ctx, ShieldService_DisableGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := c.cc.Invoke(ctx, ShieldService_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListOrganizationRoles(ctx context.Context, in *ListOrganizationRolesRequest, opts ...grpc.CallOption) (*ListOrganizationRolesResponse, error) {
	out := new(ListOrganizationRolesResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListOrganizationRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) CreateOrganizationRole(ctx context.Context, in *CreateOrganizationRoleRequest, opts ...grpc.CallOption) (*CreateOrganizationRoleResponse, error) {
	out := new(CreateOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, ShieldService_CreateOrganizationRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetOrganizationRole(ctx context.Context, in *GetOrganizationRoleRequest, opts ...grpc.CallOption) (*GetOrganizationRoleResponse, error) {
	out := new(GetOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetOrganizationRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) UpdateOrganizationRole(ctx context.Context, in *UpdateOrganizationRoleRequest, opts ...grpc.CallOption) (*UpdateOrganizationRoleResponse, error) {
	out := new(UpdateOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, ShieldService_UpdateOrganizationRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) DeleteOrganizationRole(ctx context.Context, in *DeleteOrganizationRoleRequest, opts ...grpc.CallOption) (*DeleteOrganizationRoleResponse, error) {
	out := new(DeleteOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, ShieldService_DeleteOrganizationRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListOrganizations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, ShieldService_CreateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, ShieldService_UpdateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListOrganizationProjects(ctx context.Context, in *ListOrganizationProjectsRequest, opts ...grpc.CallOption) (*ListOrganizationProjectsResponse, error) {
	out := new(ListOrganizationProjectsResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListOrganizationProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListOrganizationAdmins(ctx context.Context, in *ListOrganizationAdminsRequest, opts ...grpc.CallOption) (*ListOrganizationAdminsResponse, error) {
	out := new(ListOrganizationAdminsResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListOrganizationAdmins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListOrganizationUsers(ctx context.Context, in *ListOrganizationUsersRequest, opts ...grpc.CallOption) (*ListOrganizationUsersResponse, error) {
	out := new(ListOrganizationUsersResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListOrganizationUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) AddOrganizationUsers(ctx context.Context, in *AddOrganizationUsersRequest, opts ...grpc.CallOption) (*AddOrganizationUsersResponse, error) {
	out := new(AddOrganizationUsersResponse)
	err := c.cc.Invoke(ctx, ShieldService_AddOrganizationUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) RemoveOrganizationUser(ctx context.Context, in *RemoveOrganizationUserRequest, opts ...grpc.CallOption) (*RemoveOrganizationUserResponse, error) {
	out := new(RemoveOrganizationUserResponse)
	err := c.cc.Invoke(ctx, ShieldService_RemoveOrganizationUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListOrganizationInvitations(ctx context.Context, in *ListOrganizationInvitationsRequest, opts ...grpc.CallOption) (*ListOrganizationInvitationsResponse, error) {
	out := new(ListOrganizationInvitationsResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListOrganizationInvitations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) CreateOrganizationInvitation(ctx context.Context, in *CreateOrganizationInvitationRequest, opts ...grpc.CallOption) (*CreateOrganizationInvitationResponse, error) {
	out := new(CreateOrganizationInvitationResponse)
	err := c.cc.Invoke(ctx, ShieldService_CreateOrganizationInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetOrganizationInvitation(ctx context.Context, in *GetOrganizationInvitationRequest, opts ...grpc.CallOption) (*GetOrganizationInvitationResponse, error) {
	out := new(GetOrganizationInvitationResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetOrganizationInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) AcceptOrganizationInvitation(ctx context.Context, in *AcceptOrganizationInvitationRequest, opts ...grpc.CallOption) (*AcceptOrganizationInvitationResponse, error) {
	out := new(AcceptOrganizationInvitationResponse)
	err := c.cc.Invoke(ctx, ShieldService_AcceptOrganizationInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) DeleteOrganizationInvitation(ctx context.Context, in *DeleteOrganizationInvitationRequest, opts ...grpc.CallOption) (*DeleteOrganizationInvitationResponse, error) {
	out := new(DeleteOrganizationInvitationResponse)
	err := c.cc.Invoke(ctx, ShieldService_DeleteOrganizationInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) EnableOrganization(ctx context.Context, in *EnableOrganizationRequest, opts ...grpc.CallOption) (*EnableOrganizationResponse, error) {
	out := new(EnableOrganizationResponse)
	err := c.cc.Invoke(ctx, ShieldService_EnableOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) DisableOrganization(ctx context.Context, in *DisableOrganizationRequest, opts ...grpc.CallOption) (*DisableOrganizationResponse, error) {
	out := new(DisableOrganizationResponse)
	err := c.cc.Invoke(ctx, ShieldService_DisableOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, ShieldService_DeleteOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, ShieldService_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, ShieldService_UpdateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListProjectAdmins(ctx context.Context, in *ListProjectAdminsRequest, opts ...grpc.CallOption) (*ListProjectAdminsResponse, error) {
	out := new(ListProjectAdminsResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListProjectAdmins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListProjectUsers(ctx context.Context, in *ListProjectUsersRequest, opts ...grpc.CallOption) (*ListProjectUsersResponse, error) {
	out := new(ListProjectUsersResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListProjectUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) EnableProject(ctx context.Context, in *EnableProjectRequest, opts ...grpc.CallOption) (*EnableProjectResponse, error) {
	out := new(EnableProjectResponse)
	err := c.cc.Invoke(ctx, ShieldService_EnableProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) DisableProject(ctx context.Context, in *DisableProjectRequest, opts ...grpc.CallOption) (*DisableProjectResponse, error) {
	out := new(DisableProjectResponse)
	err := c.cc.Invoke(ctx, ShieldService_DisableProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, ShieldService_DeleteProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error) {
	out := new(CreatePolicyResponse)
	err := c.cc.Invoke(ctx, ShieldService_CreatePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error) {
	out := new(UpdatePolicyResponse)
	err := c.cc.Invoke(ctx, ShieldService_UpdatePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error) {
	out := new(DeletePolicyResponse)
	err := c.cc.Invoke(ctx, ShieldService_DeletePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) CreateRelation(ctx context.Context, in *CreateRelationRequest, opts ...grpc.CallOption) (*CreateRelationResponse, error) {
	out := new(CreateRelationResponse)
	err := c.cc.Invoke(ctx, ShieldService_CreateRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetRelation(ctx context.Context, in *GetRelationRequest, opts ...grpc.CallOption) (*GetRelationResponse, error) {
	out := new(GetRelationResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) DeleteRelation(ctx context.Context, in *DeleteRelationRequest, opts ...grpc.CallOption) (*DeleteRelationResponse, error) {
	out := new(DeleteRelationResponse)
	err := c.cc.Invoke(ctx, ShieldService_DeleteRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	out := new(ListPermissionsResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error) {
	out := new(GetPermissionResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListNamespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListProjectResources(ctx context.Context, in *ListProjectResourcesRequest, opts ...grpc.CallOption) (*ListProjectResourcesResponse, error) {
	out := new(ListProjectResourcesResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListProjectResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) CreateProjectResource(ctx context.Context, in *CreateProjectResourceRequest, opts ...grpc.CallOption) (*CreateProjectResourceResponse, error) {
	out := new(CreateProjectResourceResponse)
	err := c.cc.Invoke(ctx, ShieldService_CreateProjectResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetProjectResource(ctx context.Context, in *GetProjectResourceRequest, opts ...grpc.CallOption) (*GetProjectResourceResponse, error) {
	out := new(GetProjectResourceResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetProjectResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) UpdateProjectResource(ctx context.Context, in *UpdateProjectResourceRequest, opts ...grpc.CallOption) (*UpdateProjectResourceResponse, error) {
	out := new(UpdateProjectResourceResponse)
	err := c.cc.Invoke(ctx, ShieldService_UpdateProjectResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) DeleteProjectResource(ctx context.Context, in *DeleteProjectResourceRequest, opts ...grpc.CallOption) (*DeleteProjectResourceResponse, error) {
	out := new(DeleteProjectResourceResponse)
	err := c.cc.Invoke(ctx, ShieldService_DeleteProjectResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) CheckResourcePermission(ctx context.Context, in *CheckResourcePermissionRequest, opts ...grpc.CallOption) (*CheckResourcePermissionResponse, error) {
	out := new(CheckResourcePermissionResponse)
	err := c.cc.Invoke(ctx, ShieldService_CheckResourcePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListAuthStrategies(ctx context.Context, in *ListAuthStrategiesRequest, opts ...grpc.CallOption) (*ListAuthStrategiesResponse, error) {
	out := new(ListAuthStrategiesResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListAuthStrategies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, ShieldService_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) AuthCallback(ctx context.Context, in *AuthCallbackRequest, opts ...grpc.CallOption) (*AuthCallbackResponse, error) {
	out := new(AuthCallbackResponse)
	err := c.cc.Invoke(ctx, ShieldService_AuthCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) AuthLogout(ctx context.Context, in *AuthLogoutRequest, opts ...grpc.CallOption) (*AuthLogoutResponse, error) {
	out := new(AuthLogoutResponse)
	err := c.cc.Invoke(ctx, ShieldService_AuthLogout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListMetaSchemas(ctx context.Context, in *ListMetaSchemasRequest, opts ...grpc.CallOption) (*ListMetaSchemasResponse, error) {
	out := new(ListMetaSchemasResponse)
	err := c.cc.Invoke(ctx, ShieldService_ListMetaSchemas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) CreateMetaSchema(ctx context.Context, in *CreateMetaSchemaRequest, opts ...grpc.CallOption) (*CreateMetaSchemaResponse, error) {
	out := new(CreateMetaSchemaResponse)
	err := c.cc.Invoke(ctx, ShieldService_CreateMetaSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetMetaSchema(ctx context.Context, in *GetMetaSchemaRequest, opts ...grpc.CallOption) (*GetMetaSchemaResponse, error) {
	out := new(GetMetaSchemaResponse)
	err := c.cc.Invoke(ctx, ShieldService_GetMetaSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) UpdateMetaSchema(ctx context.Context, in *UpdateMetaSchemaRequest, opts ...grpc.CallOption) (*UpdateMetaSchemaResponse, error) {
	out := new(UpdateMetaSchemaResponse)
	err := c.cc.Invoke(ctx, ShieldService_UpdateMetaSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) DeleteMetaSchema(ctx context.Context, in *DeleteMetaSchemaRequest, opts ...grpc.CallOption) (*DeleteMetaSchemaResponse, error) {
	out := new(DeleteMetaSchemaResponse)
	err := c.cc.Invoke(ctx, ShieldService_DeleteMetaSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShieldServiceServer is the server API for ShieldService service.
// All implementations must embed UnimplementedShieldServiceServer
// for forward compatibility
type ShieldServiceServer interface {
	// Users
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	ListUserGroups(context.Context, *ListUserGroupsRequest) (*ListUserGroupsResponse, error)
	ListCurrentUserGroups(context.Context, *ListCurrentUserGroupsRequest) (*ListCurrentUserGroupsResponse, error)
	GetCurrentUser(context.Context, *GetCurrentUserRequest) (*GetCurrentUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	UpdateCurrentUser(context.Context, *UpdateCurrentUserRequest) (*UpdateCurrentUserResponse, error)
	EnableUser(context.Context, *EnableUserRequest) (*EnableUserResponse, error)
	DisableUser(context.Context, *DisableUserRequest) (*DisableUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	GetOrganizationsByUser(context.Context, *GetOrganizationsByUserRequest) (*GetOrganizationsByUserResponse, error)
	GetOrganizationsByCurrentUser(context.Context, *GetOrganizationsByCurrentUserRequest) (*GetOrganizationsByCurrentUserResponse, error)
	// Group
	ListOrganizationGroups(context.Context, *ListOrganizationGroupsRequest) (*ListOrganizationGroupsResponse, error)
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error)
	ListGroupUsers(context.Context, *ListGroupUsersRequest) (*ListGroupUsersResponse, error)
	AddGroupUsers(context.Context, *AddGroupUsersRequest) (*AddGroupUsersResponse, error)
	RemoveGroupUser(context.Context, *RemoveGroupUserRequest) (*RemoveGroupUserResponse, error)
	EnableGroup(context.Context, *EnableGroupRequest) (*EnableGroupResponse, error)
	DisableGroup(context.Context, *DisableGroupRequest) (*DisableGroupResponse, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	// Roles
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	ListOrganizationRoles(context.Context, *ListOrganizationRolesRequest) (*ListOrganizationRolesResponse, error)
	CreateOrganizationRole(context.Context, *CreateOrganizationRoleRequest) (*CreateOrganizationRoleResponse, error)
	GetOrganizationRole(context.Context, *GetOrganizationRoleRequest) (*GetOrganizationRoleResponse, error)
	UpdateOrganizationRole(context.Context, *UpdateOrganizationRoleRequest) (*UpdateOrganizationRoleResponse, error)
	DeleteOrganizationRole(context.Context, *DeleteOrganizationRoleRequest) (*DeleteOrganizationRoleResponse, error)
	// Organizations
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	ListOrganizationProjects(context.Context, *ListOrganizationProjectsRequest) (*ListOrganizationProjectsResponse, error)
	ListOrganizationAdmins(context.Context, *ListOrganizationAdminsRequest) (*ListOrganizationAdminsResponse, error)
	ListOrganizationUsers(context.Context, *ListOrganizationUsersRequest) (*ListOrganizationUsersResponse, error)
	AddOrganizationUsers(context.Context, *AddOrganizationUsersRequest) (*AddOrganizationUsersResponse, error)
	RemoveOrganizationUser(context.Context, *RemoveOrganizationUserRequest) (*RemoveOrganizationUserResponse, error)
	ListOrganizationInvitations(context.Context, *ListOrganizationInvitationsRequest) (*ListOrganizationInvitationsResponse, error)
	CreateOrganizationInvitation(context.Context, *CreateOrganizationInvitationRequest) (*CreateOrganizationInvitationResponse, error)
	GetOrganizationInvitation(context.Context, *GetOrganizationInvitationRequest) (*GetOrganizationInvitationResponse, error)
	AcceptOrganizationInvitation(context.Context, *AcceptOrganizationInvitationRequest) (*AcceptOrganizationInvitationResponse, error)
	DeleteOrganizationInvitation(context.Context, *DeleteOrganizationInvitationRequest) (*DeleteOrganizationInvitationResponse, error)
	EnableOrganization(context.Context, *EnableOrganizationRequest) (*EnableOrganizationResponse, error)
	DisableOrganization(context.Context, *DisableOrganizationRequest) (*DisableOrganizationResponse, error)
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// Projects
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	ListProjectAdmins(context.Context, *ListProjectAdminsRequest) (*ListProjectAdminsResponse, error)
	ListProjectUsers(context.Context, *ListProjectUsersRequest) (*ListProjectUsersResponse, error)
	EnableProject(context.Context, *EnableProjectRequest) (*EnableProjectResponse, error)
	DisableProject(context.Context, *DisableProjectRequest) (*DisableProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	// Policies
	CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error)
	GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error)
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error)
	DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error)
	// Relations
	CreateRelation(context.Context, *CreateRelationRequest) (*CreateRelationResponse, error)
	GetRelation(context.Context, *GetRelationRequest) (*GetRelationResponse, error)
	DeleteRelation(context.Context, *DeleteRelationRequest) (*DeleteRelationResponse, error)
	// Permissions
	ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)
	GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error)
	// Namespaces
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	// Resources
	ListProjectResources(context.Context, *ListProjectResourcesRequest) (*ListProjectResourcesResponse, error)
	CreateProjectResource(context.Context, *CreateProjectResourceRequest) (*CreateProjectResourceResponse, error)
	GetProjectResource(context.Context, *GetProjectResourceRequest) (*GetProjectResourceResponse, error)
	UpdateProjectResource(context.Context, *UpdateProjectResourceRequest) (*UpdateProjectResourceResponse, error)
	DeleteProjectResource(context.Context, *DeleteProjectResourceRequest) (*DeleteProjectResourceResponse, error)
	// Authz
	CheckResourcePermission(context.Context, *CheckResourcePermissionRequest) (*CheckResourcePermissionResponse, error)
	// Authn
	ListAuthStrategies(context.Context, *ListAuthStrategiesRequest) (*ListAuthStrategiesResponse, error)
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	AuthCallback(context.Context, *AuthCallbackRequest) (*AuthCallbackResponse, error)
	AuthLogout(context.Context, *AuthLogoutRequest) (*AuthLogoutResponse, error)
	// MetaSchemas
	ListMetaSchemas(context.Context, *ListMetaSchemasRequest) (*ListMetaSchemasResponse, error)
	CreateMetaSchema(context.Context, *CreateMetaSchemaRequest) (*CreateMetaSchemaResponse, error)
	GetMetaSchema(context.Context, *GetMetaSchemaRequest) (*GetMetaSchemaResponse, error)
	UpdateMetaSchema(context.Context, *UpdateMetaSchemaRequest) (*UpdateMetaSchemaResponse, error)
	DeleteMetaSchema(context.Context, *DeleteMetaSchemaRequest) (*DeleteMetaSchemaResponse, error)
	mustEmbedUnimplementedShieldServiceServer()
}

// UnimplementedShieldServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShieldServiceServer struct {
}

func (UnimplementedShieldServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedShieldServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedShieldServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedShieldServiceServer) ListUserGroups(context.Context, *ListUserGroupsRequest) (*ListUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroups not implemented")
}
func (UnimplementedShieldServiceServer) ListCurrentUserGroups(context.Context, *ListCurrentUserGroupsRequest) (*ListCurrentUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrentUserGroups not implemented")
}
func (UnimplementedShieldServiceServer) GetCurrentUser(context.Context, *GetCurrentUserRequest) (*GetCurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (UnimplementedShieldServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedShieldServiceServer) UpdateCurrentUser(context.Context, *UpdateCurrentUserRequest) (*UpdateCurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrentUser not implemented")
}
func (UnimplementedShieldServiceServer) EnableUser(context.Context, *EnableUserRequest) (*EnableUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUser not implemented")
}
func (UnimplementedShieldServiceServer) DisableUser(context.Context, *DisableUserRequest) (*DisableUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableUser not implemented")
}
func (UnimplementedShieldServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedShieldServiceServer) GetOrganizationsByUser(context.Context, *GetOrganizationsByUserRequest) (*GetOrganizationsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsByUser not implemented")
}
func (UnimplementedShieldServiceServer) GetOrganizationsByCurrentUser(context.Context, *GetOrganizationsByCurrentUserRequest) (*GetOrganizationsByCurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsByCurrentUser not implemented")
}
func (UnimplementedShieldServiceServer) ListOrganizationGroups(context.Context, *ListOrganizationGroupsRequest) (*ListOrganizationGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationGroups not implemented")
}
func (UnimplementedShieldServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedShieldServiceServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedShieldServiceServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedShieldServiceServer) ListGroupUsers(context.Context, *ListGroupUsersRequest) (*ListGroupUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupUsers not implemented")
}
func (UnimplementedShieldServiceServer) AddGroupUsers(context.Context, *AddGroupUsersRequest) (*AddGroupUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupUsers not implemented")
}
func (UnimplementedShieldServiceServer) RemoveGroupUser(context.Context, *RemoveGroupUserRequest) (*RemoveGroupUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupUser not implemented")
}
func (UnimplementedShieldServiceServer) EnableGroup(context.Context, *EnableGroupRequest) (*EnableGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableGroup not implemented")
}
func (UnimplementedShieldServiceServer) DisableGroup(context.Context, *DisableGroupRequest) (*DisableGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableGroup not implemented")
}
func (UnimplementedShieldServiceServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedShieldServiceServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedShieldServiceServer) ListOrganizationRoles(context.Context, *ListOrganizationRolesRequest) (*ListOrganizationRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationRoles not implemented")
}
func (UnimplementedShieldServiceServer) CreateOrganizationRole(context.Context, *CreateOrganizationRoleRequest) (*CreateOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationRole not implemented")
}
func (UnimplementedShieldServiceServer) GetOrganizationRole(context.Context, *GetOrganizationRoleRequest) (*GetOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationRole not implemented")
}
func (UnimplementedShieldServiceServer) UpdateOrganizationRole(context.Context, *UpdateOrganizationRoleRequest) (*UpdateOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationRole not implemented")
}
func (UnimplementedShieldServiceServer) DeleteOrganizationRole(context.Context, *DeleteOrganizationRoleRequest) (*DeleteOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationRole not implemented")
}
func (UnimplementedShieldServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedShieldServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedShieldServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedShieldServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedShieldServiceServer) ListOrganizationProjects(context.Context, *ListOrganizationProjectsRequest) (*ListOrganizationProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationProjects not implemented")
}
func (UnimplementedShieldServiceServer) ListOrganizationAdmins(context.Context, *ListOrganizationAdminsRequest) (*ListOrganizationAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationAdmins not implemented")
}
func (UnimplementedShieldServiceServer) ListOrganizationUsers(context.Context, *ListOrganizationUsersRequest) (*ListOrganizationUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationUsers not implemented")
}
func (UnimplementedShieldServiceServer) AddOrganizationUsers(context.Context, *AddOrganizationUsersRequest) (*AddOrganizationUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganizationUsers not implemented")
}
func (UnimplementedShieldServiceServer) RemoveOrganizationUser(context.Context, *RemoveOrganizationUserRequest) (*RemoveOrganizationUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganizationUser not implemented")
}
func (UnimplementedShieldServiceServer) ListOrganizationInvitations(context.Context, *ListOrganizationInvitationsRequest) (*ListOrganizationInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationInvitations not implemented")
}
func (UnimplementedShieldServiceServer) CreateOrganizationInvitation(context.Context, *CreateOrganizationInvitationRequest) (*CreateOrganizationInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationInvitation not implemented")
}
func (UnimplementedShieldServiceServer) GetOrganizationInvitation(context.Context, *GetOrganizationInvitationRequest) (*GetOrganizationInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationInvitation not implemented")
}
func (UnimplementedShieldServiceServer) AcceptOrganizationInvitation(context.Context, *AcceptOrganizationInvitationRequest) (*AcceptOrganizationInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOrganizationInvitation not implemented")
}
func (UnimplementedShieldServiceServer) DeleteOrganizationInvitation(context.Context, *DeleteOrganizationInvitationRequest) (*DeleteOrganizationInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationInvitation not implemented")
}
func (UnimplementedShieldServiceServer) EnableOrganization(context.Context, *EnableOrganizationRequest) (*EnableOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableOrganization not implemented")
}
func (UnimplementedShieldServiceServer) DisableOrganization(context.Context, *DisableOrganizationRequest) (*DisableOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableOrganization not implemented")
}
func (UnimplementedShieldServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedShieldServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedShieldServiceServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedShieldServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedShieldServiceServer) ListProjectAdmins(context.Context, *ListProjectAdminsRequest) (*ListProjectAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectAdmins not implemented")
}
func (UnimplementedShieldServiceServer) ListProjectUsers(context.Context, *ListProjectUsersRequest) (*ListProjectUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectUsers not implemented")
}
func (UnimplementedShieldServiceServer) EnableProject(context.Context, *EnableProjectRequest) (*EnableProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableProject not implemented")
}
func (UnimplementedShieldServiceServer) DisableProject(context.Context, *DisableProjectRequest) (*DisableProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableProject not implemented")
}
func (UnimplementedShieldServiceServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedShieldServiceServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedShieldServiceServer) GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedShieldServiceServer) UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedShieldServiceServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedShieldServiceServer) CreateRelation(context.Context, *CreateRelationRequest) (*CreateRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelation not implemented")
}
func (UnimplementedShieldServiceServer) GetRelation(context.Context, *GetRelationRequest) (*GetRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelation not implemented")
}
func (UnimplementedShieldServiceServer) DeleteRelation(context.Context, *DeleteRelationRequest) (*DeleteRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelation not implemented")
}
func (UnimplementedShieldServiceServer) ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedShieldServiceServer) GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedShieldServiceServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedShieldServiceServer) GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedShieldServiceServer) ListProjectResources(context.Context, *ListProjectResourcesRequest) (*ListProjectResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectResources not implemented")
}
func (UnimplementedShieldServiceServer) CreateProjectResource(context.Context, *CreateProjectResourceRequest) (*CreateProjectResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectResource not implemented")
}
func (UnimplementedShieldServiceServer) GetProjectResource(context.Context, *GetProjectResourceRequest) (*GetProjectResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectResource not implemented")
}
func (UnimplementedShieldServiceServer) UpdateProjectResource(context.Context, *UpdateProjectResourceRequest) (*UpdateProjectResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectResource not implemented")
}
func (UnimplementedShieldServiceServer) DeleteProjectResource(context.Context, *DeleteProjectResourceRequest) (*DeleteProjectResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectResource not implemented")
}
func (UnimplementedShieldServiceServer) CheckResourcePermission(context.Context, *CheckResourcePermissionRequest) (*CheckResourcePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckResourcePermission not implemented")
}
func (UnimplementedShieldServiceServer) ListAuthStrategies(context.Context, *ListAuthStrategiesRequest) (*ListAuthStrategiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthStrategies not implemented")
}
func (UnimplementedShieldServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedShieldServiceServer) AuthCallback(context.Context, *AuthCallbackRequest) (*AuthCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCallback not implemented")
}
func (UnimplementedShieldServiceServer) AuthLogout(context.Context, *AuthLogoutRequest) (*AuthLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogout not implemented")
}
func (UnimplementedShieldServiceServer) ListMetaSchemas(context.Context, *ListMetaSchemasRequest) (*ListMetaSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetaSchemas not implemented")
}
func (UnimplementedShieldServiceServer) CreateMetaSchema(context.Context, *CreateMetaSchemaRequest) (*CreateMetaSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetaSchema not implemented")
}
func (UnimplementedShieldServiceServer) GetMetaSchema(context.Context, *GetMetaSchemaRequest) (*GetMetaSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaSchema not implemented")
}
func (UnimplementedShieldServiceServer) UpdateMetaSchema(context.Context, *UpdateMetaSchemaRequest) (*UpdateMetaSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetaSchema not implemented")
}
func (UnimplementedShieldServiceServer) DeleteMetaSchema(context.Context, *DeleteMetaSchemaRequest) (*DeleteMetaSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetaSchema not implemented")
}
func (UnimplementedShieldServiceServer) mustEmbedUnimplementedShieldServiceServer() {}

// UnsafeShieldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShieldServiceServer will
// result in compilation errors.
type UnsafeShieldServiceServer interface {
	mustEmbedUnimplementedShieldServiceServer()
}

func RegisterShieldServiceServer(s grpc.ServiceRegistrar, srv ShieldServiceServer) {
	s.RegisterService(&ShieldService_ServiceDesc, srv)
}

func _ShieldService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListUserGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListUserGroups(ctx, req.(*ListUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListCurrentUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrentUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListCurrentUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListCurrentUserGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListCurrentUserGroups(ctx, req.(*ListCurrentUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetCurrentUser(ctx, req.(*GetCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_UpdateCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).UpdateCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_UpdateCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).UpdateCurrentUser(ctx, req.(*UpdateCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_EnableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).EnableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_EnableUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).EnableUser(ctx, req.(*EnableUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_DisableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).DisableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_DisableUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).DisableUser(ctx, req.(*DisableUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetOrganizationsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetOrganizationsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetOrganizationsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetOrganizationsByUser(ctx, req.(*GetOrganizationsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetOrganizationsByCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsByCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetOrganizationsByCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetOrganizationsByCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetOrganizationsByCurrentUser(ctx, req.(*GetOrganizationsByCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListOrganizationGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListOrganizationGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListOrganizationGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListOrganizationGroups(ctx, req.(*ListOrganizationGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListGroupUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListGroupUsers(ctx, req.(*ListGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_AddGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).AddGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_AddGroupUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).AddGroupUsers(ctx, req.(*AddGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_RemoveGroupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).RemoveGroupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_RemoveGroupUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).RemoveGroupUser(ctx, req.(*RemoveGroupUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_EnableGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).EnableGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_EnableGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).EnableGroup(ctx, req.(*EnableGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_DisableGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).DisableGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_DisableGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).DisableGroup(ctx, req.(*DisableGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListOrganizationRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListOrganizationRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListOrganizationRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListOrganizationRoles(ctx, req.(*ListOrganizationRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_CreateOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).CreateOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_CreateOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).CreateOrganizationRole(ctx, req.(*CreateOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetOrganizationRole(ctx, req.(*GetOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_UpdateOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).UpdateOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_UpdateOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).UpdateOrganizationRole(ctx, req.(*UpdateOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_DeleteOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).DeleteOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_DeleteOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).DeleteOrganizationRole(ctx, req.(*DeleteOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListOrganizationProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListOrganizationProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListOrganizationProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListOrganizationProjects(ctx, req.(*ListOrganizationProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListOrganizationAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListOrganizationAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListOrganizationAdmins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListOrganizationAdmins(ctx, req.(*ListOrganizationAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListOrganizationUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListOrganizationUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListOrganizationUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListOrganizationUsers(ctx, req.(*ListOrganizationUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_AddOrganizationUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrganizationUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).AddOrganizationUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_AddOrganizationUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).AddOrganizationUsers(ctx, req.(*AddOrganizationUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_RemoveOrganizationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).RemoveOrganizationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_RemoveOrganizationUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).RemoveOrganizationUser(ctx, req.(*RemoveOrganizationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListOrganizationInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListOrganizationInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListOrganizationInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListOrganizationInvitations(ctx, req.(*ListOrganizationInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_CreateOrganizationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).CreateOrganizationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_CreateOrganizationInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).CreateOrganizationInvitation(ctx, req.(*CreateOrganizationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetOrganizationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetOrganizationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetOrganizationInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetOrganizationInvitation(ctx, req.(*GetOrganizationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_AcceptOrganizationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOrganizationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).AcceptOrganizationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_AcceptOrganizationInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).AcceptOrganizationInvitation(ctx, req.(*AcceptOrganizationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_DeleteOrganizationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).DeleteOrganizationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_DeleteOrganizationInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).DeleteOrganizationInvitation(ctx, req.(*DeleteOrganizationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_EnableOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).EnableOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_EnableOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).EnableOrganization(ctx, req.(*EnableOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_DisableOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).DisableOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_DisableOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).DisableOrganization(ctx, req.(*DisableOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListProjectAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListProjectAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListProjectAdmins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListProjectAdmins(ctx, req.(*ListProjectAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListProjectUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListProjectUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListProjectUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListProjectUsers(ctx, req.(*ListProjectUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_EnableProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).EnableProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_EnableProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).EnableProject(ctx, req.(*EnableProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_DisableProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).DisableProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_DisableProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).DisableProject(ctx, req.(*DisableProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_CreatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_UpdatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_DeletePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_CreateRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).CreateRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_CreateRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).CreateRelation(ctx, req.(*CreateRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetRelation(ctx, req.(*GetRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_DeleteRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).DeleteRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_DeleteRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).DeleteRelation(ctx, req.(*DeleteRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListPermissions(ctx, req.(*ListPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetPermission(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListProjectResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListProjectResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListProjectResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListProjectResources(ctx, req.(*ListProjectResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_CreateProjectResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).CreateProjectResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_CreateProjectResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).CreateProjectResource(ctx, req.(*CreateProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetProjectResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetProjectResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetProjectResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetProjectResource(ctx, req.(*GetProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_UpdateProjectResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).UpdateProjectResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_UpdateProjectResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).UpdateProjectResource(ctx, req.(*UpdateProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_DeleteProjectResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).DeleteProjectResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_DeleteProjectResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).DeleteProjectResource(ctx, req.(*DeleteProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_CheckResourcePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckResourcePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).CheckResourcePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_CheckResourcePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).CheckResourcePermission(ctx, req.(*CheckResourcePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListAuthStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListAuthStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListAuthStrategies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListAuthStrategies(ctx, req.(*ListAuthStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_AuthCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).AuthCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_AuthCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).AuthCallback(ctx, req.(*AuthCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_AuthLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).AuthLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_AuthLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).AuthLogout(ctx, req.(*AuthLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListMetaSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetaSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListMetaSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_ListMetaSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListMetaSchemas(ctx, req.(*ListMetaSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_CreateMetaSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMetaSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).CreateMetaSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_CreateMetaSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).CreateMetaSchema(ctx, req.(*CreateMetaSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetMetaSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetMetaSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_GetMetaSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetMetaSchema(ctx, req.(*GetMetaSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_UpdateMetaSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetaSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).UpdateMetaSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_UpdateMetaSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).UpdateMetaSchema(ctx, req.(*UpdateMetaSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_DeleteMetaSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetaSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).DeleteMetaSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldService_DeleteMetaSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).DeleteMetaSchema(ctx, req.(*DeleteMetaSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShieldService_ServiceDesc is the grpc.ServiceDesc for ShieldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShieldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odpf.shield.v1beta1.ShieldService",
	HandlerType: (*ShieldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsers",
			Handler:    _ShieldService_ListUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _ShieldService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ShieldService_GetUser_Handler,
		},
		{
			MethodName: "ListUserGroups",
			Handler:    _ShieldService_ListUserGroups_Handler,
		},
		{
			MethodName: "ListCurrentUserGroups",
			Handler:    _ShieldService_ListCurrentUserGroups_Handler,
		},
		{
			MethodName: "GetCurrentUser",
			Handler:    _ShieldService_GetCurrentUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ShieldService_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateCurrentUser",
			Handler:    _ShieldService_UpdateCurrentUser_Handler,
		},
		{
			MethodName: "EnableUser",
			Handler:    _ShieldService_EnableUser_Handler,
		},
		{
			MethodName: "DisableUser",
			Handler:    _ShieldService_DisableUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ShieldService_DeleteUser_Handler,
		},
		{
			MethodName: "GetOrganizationsByUser",
			Handler:    _ShieldService_GetOrganizationsByUser_Handler,
		},
		{
			MethodName: "GetOrganizationsByCurrentUser",
			Handler:    _ShieldService_GetOrganizationsByCurrentUser_Handler,
		},
		{
			MethodName: "ListOrganizationGroups",
			Handler:    _ShieldService_ListOrganizationGroups_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _ShieldService_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _ShieldService_GetGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _ShieldService_UpdateGroup_Handler,
		},
		{
			MethodName: "ListGroupUsers",
			Handler:    _ShieldService_ListGroupUsers_Handler,
		},
		{
			MethodName: "AddGroupUsers",
			Handler:    _ShieldService_AddGroupUsers_Handler,
		},
		{
			MethodName: "RemoveGroupUser",
			Handler:    _ShieldService_RemoveGroupUser_Handler,
		},
		{
			MethodName: "EnableGroup",
			Handler:    _ShieldService_EnableGroup_Handler,
		},
		{
			MethodName: "DisableGroup",
			Handler:    _ShieldService_DisableGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _ShieldService_DeleteGroup_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _ShieldService_ListRoles_Handler,
		},
		{
			MethodName: "ListOrganizationRoles",
			Handler:    _ShieldService_ListOrganizationRoles_Handler,
		},
		{
			MethodName: "CreateOrganizationRole",
			Handler:    _ShieldService_CreateOrganizationRole_Handler,
		},
		{
			MethodName: "GetOrganizationRole",
			Handler:    _ShieldService_GetOrganizationRole_Handler,
		},
		{
			MethodName: "UpdateOrganizationRole",
			Handler:    _ShieldService_UpdateOrganizationRole_Handler,
		},
		{
			MethodName: "DeleteOrganizationRole",
			Handler:    _ShieldService_DeleteOrganizationRole_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _ShieldService_ListOrganizations_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _ShieldService_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _ShieldService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _ShieldService_UpdateOrganization_Handler,
		},
		{
			MethodName: "ListOrganizationProjects",
			Handler:    _ShieldService_ListOrganizationProjects_Handler,
		},
		{
			MethodName: "ListOrganizationAdmins",
			Handler:    _ShieldService_ListOrganizationAdmins_Handler,
		},
		{
			MethodName: "ListOrganizationUsers",
			Handler:    _ShieldService_ListOrganizationUsers_Handler,
		},
		{
			MethodName: "AddOrganizationUsers",
			Handler:    _ShieldService_AddOrganizationUsers_Handler,
		},
		{
			MethodName: "RemoveOrganizationUser",
			Handler:    _ShieldService_RemoveOrganizationUser_Handler,
		},
		{
			MethodName: "ListOrganizationInvitations",
			Handler:    _ShieldService_ListOrganizationInvitations_Handler,
		},
		{
			MethodName: "CreateOrganizationInvitation",
			Handler:    _ShieldService_CreateOrganizationInvitation_Handler,
		},
		{
			MethodName: "GetOrganizationInvitation",
			Handler:    _ShieldService_GetOrganizationInvitation_Handler,
		},
		{
			MethodName: "AcceptOrganizationInvitation",
			Handler:    _ShieldService_AcceptOrganizationInvitation_Handler,
		},
		{
			MethodName: "DeleteOrganizationInvitation",
			Handler:    _ShieldService_DeleteOrganizationInvitation_Handler,
		},
		{
			MethodName: "EnableOrganization",
			Handler:    _ShieldService_EnableOrganization_Handler,
		},
		{
			MethodName: "DisableOrganization",
			Handler:    _ShieldService_DisableOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _ShieldService_DeleteOrganization_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ShieldService_CreateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _ShieldService_GetProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ShieldService_UpdateProject_Handler,
		},
		{
			MethodName: "ListProjectAdmins",
			Handler:    _ShieldService_ListProjectAdmins_Handler,
		},
		{
			MethodName: "ListProjectUsers",
			Handler:    _ShieldService_ListProjectUsers_Handler,
		},
		{
			MethodName: "EnableProject",
			Handler:    _ShieldService_EnableProject_Handler,
		},
		{
			MethodName: "DisableProject",
			Handler:    _ShieldService_DisableProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ShieldService_DeleteProject_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _ShieldService_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _ShieldService_GetPolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _ShieldService_UpdatePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _ShieldService_DeletePolicy_Handler,
		},
		{
			MethodName: "CreateRelation",
			Handler:    _ShieldService_CreateRelation_Handler,
		},
		{
			MethodName: "GetRelation",
			Handler:    _ShieldService_GetRelation_Handler,
		},
		{
			MethodName: "DeleteRelation",
			Handler:    _ShieldService_DeleteRelation_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _ShieldService_ListPermissions_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _ShieldService_GetPermission_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _ShieldService_ListNamespaces_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _ShieldService_GetNamespace_Handler,
		},
		{
			MethodName: "ListProjectResources",
			Handler:    _ShieldService_ListProjectResources_Handler,
		},
		{
			MethodName: "CreateProjectResource",
			Handler:    _ShieldService_CreateProjectResource_Handler,
		},
		{
			MethodName: "GetProjectResource",
			Handler:    _ShieldService_GetProjectResource_Handler,
		},
		{
			MethodName: "UpdateProjectResource",
			Handler:    _ShieldService_UpdateProjectResource_Handler,
		},
		{
			MethodName: "DeleteProjectResource",
			Handler:    _ShieldService_DeleteProjectResource_Handler,
		},
		{
			MethodName: "CheckResourcePermission",
			Handler:    _ShieldService_CheckResourcePermission_Handler,
		},
		{
			MethodName: "ListAuthStrategies",
			Handler:    _ShieldService_ListAuthStrategies_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _ShieldService_Authenticate_Handler,
		},
		{
			MethodName: "AuthCallback",
			Handler:    _ShieldService_AuthCallback_Handler,
		},
		{
			MethodName: "AuthLogout",
			Handler:    _ShieldService_AuthLogout_Handler,
		},
		{
			MethodName: "ListMetaSchemas",
			Handler:    _ShieldService_ListMetaSchemas_Handler,
		},
		{
			MethodName: "CreateMetaSchema",
			Handler:    _ShieldService_CreateMetaSchema_Handler,
		},
		{
			MethodName: "GetMetaSchema",
			Handler:    _ShieldService_GetMetaSchema_Handler,
		},
		{
			MethodName: "UpdateMetaSchema",
			Handler:    _ShieldService_UpdateMetaSchema_Handler,
		},
		{
			MethodName: "DeleteMetaSchema",
			Handler:    _ShieldService_DeleteMetaSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "odpf/shield/v1beta1/shield.proto",
}
