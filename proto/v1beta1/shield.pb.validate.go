// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: odpf/shield/v1beta1/shield.proto

package shieldv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthLogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthLogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLogoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLogoutRequestMultiError, or nil if none found.
func (m *AuthLogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthLogoutRequestMultiError(errors)
	}

	return nil
}

// AuthLogoutRequestMultiError is an error wrapping multiple validation errors
// returned by AuthLogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthLogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLogoutRequestMultiError) AllErrors() []error { return m }

// AuthLogoutRequestValidationError is the validation error returned by
// AuthLogoutRequest.Validate if the designated constraints aren't met.
type AuthLogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLogoutRequestValidationError) ErrorName() string {
	return "AuthLogoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthLogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLogoutRequestValidationError{}

// Validate checks the field values on AuthLogoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthLogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLogoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLogoutResponseMultiError, or nil if none found.
func (m *AuthLogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthLogoutResponseMultiError(errors)
	}

	return nil
}

// AuthLogoutResponseMultiError is an error wrapping multiple validation errors
// returned by AuthLogoutResponse.ValidateAll() if the designated constraints
// aren't met.
type AuthLogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLogoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLogoutResponseMultiError) AllErrors() []error { return m }

// AuthLogoutResponseValidationError is the validation error returned by
// AuthLogoutResponse.Validate if the designated constraints aren't met.
type AuthLogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLogoutResponseValidationError) ErrorName() string {
	return "AuthLogoutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthLogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLogoutResponseValidationError{}

// Validate checks the field values on AuthCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthCallbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthCallbackRequestMultiError, or nil if none found.
func (m *AuthCallbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthCallbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StrategyName

	// no validation rules for State

	// no validation rules for Code

	if len(errors) > 0 {
		return AuthCallbackRequestMultiError(errors)
	}

	return nil
}

// AuthCallbackRequestMultiError is an error wrapping multiple validation
// errors returned by AuthCallbackRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthCallbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthCallbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthCallbackRequestMultiError) AllErrors() []error { return m }

// AuthCallbackRequestValidationError is the validation error returned by
// AuthCallbackRequest.Validate if the designated constraints aren't met.
type AuthCallbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthCallbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthCallbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthCallbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthCallbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthCallbackRequestValidationError) ErrorName() string {
	return "AuthCallbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthCallbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthCallbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthCallbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthCallbackRequestValidationError{}

// Validate checks the field values on AuthCallbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthCallbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthCallbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthCallbackResponseMultiError, or nil if none found.
func (m *AuthCallbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthCallbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthCallbackResponseMultiError(errors)
	}

	return nil
}

// AuthCallbackResponseMultiError is an error wrapping multiple validation
// errors returned by AuthCallbackResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthCallbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthCallbackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthCallbackResponseMultiError) AllErrors() []error { return m }

// AuthCallbackResponseValidationError is the validation error returned by
// AuthCallbackResponse.Validate if the designated constraints aren't met.
type AuthCallbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthCallbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthCallbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthCallbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthCallbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthCallbackResponseValidationError) ErrorName() string {
	return "AuthCallbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthCallbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthCallbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthCallbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthCallbackResponseValidationError{}

// Validate checks the field values on AuthenticateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticateRequestMultiError, or nil if none found.
func (m *AuthenticateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StrategyName

	// no validation rules for Redirect

	// no validation rules for ReturnTo

	if len(errors) > 0 {
		return AuthenticateRequestMultiError(errors)
	}

	return nil
}

// AuthenticateRequestMultiError is an error wrapping multiple validation
// errors returned by AuthenticateRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthenticateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticateRequestMultiError) AllErrors() []error { return m }

// AuthenticateRequestValidationError is the validation error returned by
// AuthenticateRequest.Validate if the designated constraints aren't met.
type AuthenticateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticateRequestValidationError) ErrorName() string {
	return "AuthenticateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticateRequestValidationError{}

// Validate checks the field values on AuthenticateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticateResponseMultiError, or nil if none found.
func (m *AuthenticateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Endpoint

	if len(errors) > 0 {
		return AuthenticateResponseMultiError(errors)
	}

	return nil
}

// AuthenticateResponseMultiError is an error wrapping multiple validation
// errors returned by AuthenticateResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthenticateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticateResponseMultiError) AllErrors() []error { return m }

// AuthenticateResponseValidationError is the validation error returned by
// AuthenticateResponse.Validate if the designated constraints aren't met.
type AuthenticateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticateResponseValidationError) ErrorName() string {
	return "AuthenticateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticateResponseValidationError{}

// Validate checks the field values on AuthStrategy with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthStrategyMultiError, or
// nil if none found.
func (m *AuthStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthStrategyValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthStrategyValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthStrategyValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthStrategyMultiError(errors)
	}

	return nil
}

// AuthStrategyMultiError is an error wrapping multiple validation errors
// returned by AuthStrategy.ValidateAll() if the designated constraints aren't met.
type AuthStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthStrategyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthStrategyMultiError) AllErrors() []error { return m }

// AuthStrategyValidationError is the validation error returned by
// AuthStrategy.Validate if the designated constraints aren't met.
type AuthStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthStrategyValidationError) ErrorName() string { return "AuthStrategyValidationError" }

// Error satisfies the builtin error interface
func (e AuthStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthStrategyValidationError{}

// Validate checks the field values on ListAuthStrategiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuthStrategiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuthStrategiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuthStrategiesRequestMultiError, or nil if none found.
func (m *ListAuthStrategiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuthStrategiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAuthStrategiesRequestMultiError(errors)
	}

	return nil
}

// ListAuthStrategiesRequestMultiError is an error wrapping multiple validation
// errors returned by ListAuthStrategiesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListAuthStrategiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuthStrategiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuthStrategiesRequestMultiError) AllErrors() []error { return m }

// ListAuthStrategiesRequestValidationError is the validation error returned by
// ListAuthStrategiesRequest.Validate if the designated constraints aren't met.
type ListAuthStrategiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuthStrategiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuthStrategiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuthStrategiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuthStrategiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuthStrategiesRequestValidationError) ErrorName() string {
	return "ListAuthStrategiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuthStrategiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuthStrategiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuthStrategiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuthStrategiesRequestValidationError{}

// Validate checks the field values on ListAuthStrategiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuthStrategiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuthStrategiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuthStrategiesResponseMultiError, or nil if none found.
func (m *ListAuthStrategiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuthStrategiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStrategies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuthStrategiesResponseValidationError{
						field:  fmt.Sprintf("Strategies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuthStrategiesResponseValidationError{
						field:  fmt.Sprintf("Strategies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuthStrategiesResponseValidationError{
					field:  fmt.Sprintf("Strategies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAuthStrategiesResponseMultiError(errors)
	}

	return nil
}

// ListAuthStrategiesResponseMultiError is an error wrapping multiple
// validation errors returned by ListAuthStrategiesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListAuthStrategiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuthStrategiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuthStrategiesResponseMultiError) AllErrors() []error { return m }

// ListAuthStrategiesResponseValidationError is the validation error returned
// by ListAuthStrategiesResponse.Validate if the designated constraints aren't met.
type ListAuthStrategiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuthStrategiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuthStrategiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuthStrategiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuthStrategiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuthStrategiesResponseValidationError) ErrorName() string {
	return "ListAuthStrategiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuthStrategiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuthStrategiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuthStrategiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuthStrategiesResponseValidationError{}

// Validate checks the field values on UserRequestBody with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRequestBodyMultiError, or nil if none found.
func (m *UserRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UserRequestBody_Name_Pattern.MatchString(m.GetName()) {
		err := UserRequestBodyValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^([a-zA-Z][a-zA-Z0-9-_]{3,64})?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UserRequestBodyValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Title

	if len(errors) > 0 {
		return UserRequestBodyMultiError(errors)
	}

	return nil
}

func (m *UserRequestBody) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserRequestBody) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserRequestBodyMultiError is an error wrapping multiple validation errors
// returned by UserRequestBody.ValidateAll() if the designated constraints
// aren't met.
type UserRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRequestBodyMultiError) AllErrors() []error { return m }

// UserRequestBodyValidationError is the validation error returned by
// UserRequestBody.Validate if the designated constraints aren't met.
type UserRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRequestBodyValidationError) ErrorName() string { return "UserRequestBodyValidationError" }

// Error satisfies the builtin error interface
func (e UserRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRequestBodyValidationError{}

var _UserRequestBody_Name_Pattern = regexp.MustCompile("^([a-zA-Z][a-zA-Z0-9-_]{3,64})?$")

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersRequestMultiError, or nil if none found.
func (m *ListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNum

	// no validation rules for Keyword

	// no validation rules for OrgId

	// no validation rules for GroupId

	// no validation rules for State

	if len(errors) > 0 {
		return ListUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsersRequestMultiError is an error wrapping multiple validation errors
// returned by ListUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRequestMultiError) AllErrors() []error { return m }

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponseMultiError, or nil if none found.
func (m *ListUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUsersResponseMultiError(errors)
	}

	return nil
}

// ListUsersResponseMultiError is an error wrapping multiple validation errors
// returned by ListUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponseMultiError) AllErrors() []error { return m }

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBody() == nil {
		err := CreateUserRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on GetOrganizationsByUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationsByUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationsByUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationsByUserRequestMultiError, or nil if none found.
func (m *GetOrganizationsByUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationsByUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOrganizationsByUserRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationsByUserRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationsByUserRequest.ValidateAll()
// if the designated constraints aren't met.
type GetOrganizationsByUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationsByUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationsByUserRequestMultiError) AllErrors() []error { return m }

// GetOrganizationsByUserRequestValidationError is the validation error
// returned by GetOrganizationsByUserRequest.Validate if the designated
// constraints aren't met.
type GetOrganizationsByUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationsByUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationsByUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationsByUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationsByUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationsByUserRequestValidationError) ErrorName() string {
	return "GetOrganizationsByUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationsByUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationsByUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationsByUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationsByUserRequestValidationError{}

// Validate checks the field values on GetOrganizationsByUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationsByUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationsByUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationsByUserResponseMultiError, or nil if none found.
func (m *GetOrganizationsByUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationsByUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrganizationsByUserResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrganizationsByUserResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrganizationsByUserResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrganizationsByUserResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationsByUserResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationsByUserResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOrganizationsByUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationsByUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationsByUserResponseMultiError) AllErrors() []error { return m }

// GetOrganizationsByUserResponseValidationError is the validation error
// returned by GetOrganizationsByUserResponse.Validate if the designated
// constraints aren't met.
type GetOrganizationsByUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationsByUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationsByUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationsByUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationsByUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationsByUserResponseValidationError) ErrorName() string {
	return "GetOrganizationsByUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationsByUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationsByUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationsByUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationsByUserResponseValidationError{}

// Validate checks the field values on GetOrganizationsByCurrentUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOrganizationsByCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationsByCurrentUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrganizationsByCurrentUserRequestMultiError, or nil if none found.
func (m *GetOrganizationsByCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationsByCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOrganizationsByCurrentUserRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationsByCurrentUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationsByCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationsByCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationsByCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationsByCurrentUserRequestMultiError) AllErrors() []error { return m }

// GetOrganizationsByCurrentUserRequestValidationError is the validation error
// returned by GetOrganizationsByCurrentUserRequest.Validate if the designated
// constraints aren't met.
type GetOrganizationsByCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationsByCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationsByCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationsByCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationsByCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationsByCurrentUserRequestValidationError) ErrorName() string {
	return "GetOrganizationsByCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationsByCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationsByCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationsByCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationsByCurrentUserRequestValidationError{}

// Validate checks the field values on GetOrganizationsByCurrentUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOrganizationsByCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationsByCurrentUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrganizationsByCurrentUserResponseMultiError, or nil if none found.
func (m *GetOrganizationsByCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationsByCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrganizationsByCurrentUserResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrganizationsByCurrentUserResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrganizationsByCurrentUserResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrganizationsByCurrentUserResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationsByCurrentUserResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetOrganizationsByCurrentUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationsByCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationsByCurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationsByCurrentUserResponseMultiError) AllErrors() []error { return m }

// GetOrganizationsByCurrentUserResponseValidationError is the validation error
// returned by GetOrganizationsByCurrentUserResponse.Validate if the
// designated constraints aren't met.
type GetOrganizationsByCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationsByCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationsByCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationsByCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationsByCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationsByCurrentUserResponseValidationError) ErrorName() string {
	return "GetOrganizationsByCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationsByCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationsByCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationsByCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationsByCurrentUserResponseValidationError{}

// Validate checks the field values on EnableUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnableUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableUserRequestMultiError, or nil if none found.
func (m *EnableUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return EnableUserRequestMultiError(errors)
	}

	return nil
}

// EnableUserRequestMultiError is an error wrapping multiple validation errors
// returned by EnableUserRequest.ValidateAll() if the designated constraints
// aren't met.
type EnableUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableUserRequestMultiError) AllErrors() []error { return m }

// EnableUserRequestValidationError is the validation error returned by
// EnableUserRequest.Validate if the designated constraints aren't met.
type EnableUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableUserRequestValidationError) ErrorName() string {
	return "EnableUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableUserRequestValidationError{}

// Validate checks the field values on EnableUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableUserResponseMultiError, or nil if none found.
func (m *EnableUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableUserResponseMultiError(errors)
	}

	return nil
}

// EnableUserResponseMultiError is an error wrapping multiple validation errors
// returned by EnableUserResponse.ValidateAll() if the designated constraints
// aren't met.
type EnableUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableUserResponseMultiError) AllErrors() []error { return m }

// EnableUserResponseValidationError is the validation error returned by
// EnableUserResponse.Validate if the designated constraints aren't met.
type EnableUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableUserResponseValidationError) ErrorName() string {
	return "EnableUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableUserResponseValidationError{}

// Validate checks the field values on DisableUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableUserRequestMultiError, or nil if none found.
func (m *DisableUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DisableUserRequestMultiError(errors)
	}

	return nil
}

// DisableUserRequestMultiError is an error wrapping multiple validation errors
// returned by DisableUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DisableUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableUserRequestMultiError) AllErrors() []error { return m }

// DisableUserRequestValidationError is the validation error returned by
// DisableUserRequest.Validate if the designated constraints aren't met.
type DisableUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableUserRequestValidationError) ErrorName() string {
	return "DisableUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableUserRequestValidationError{}

// Validate checks the field values on DisableUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableUserResponseMultiError, or nil if none found.
func (m *DisableUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableUserResponseMultiError(errors)
	}

	return nil
}

// DisableUserResponseMultiError is an error wrapping multiple validation
// errors returned by DisableUserResponse.ValidateAll() if the designated
// constraints aren't met.
type DisableUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableUserResponseMultiError) AllErrors() []error { return m }

// DisableUserResponseValidationError is the validation error returned by
// DisableUserResponse.Validate if the designated constraints aren't met.
type DisableUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableUserResponseValidationError) ErrorName() string {
	return "DisableUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableUserResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserResponseMultiError, or nil if none found.
func (m *DeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserResponseMultiError(errors)
	}

	return nil
}

// DeleteUserResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUserResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserResponseMultiError) AllErrors() []error { return m }

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserRequestMultiError, or nil if none found.
func (m *GetCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentUserRequestMultiError(errors)
	}

	return nil
}

// GetCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserRequestMultiError) AllErrors() []error { return m }

// GetCurrentUserRequestValidationError is the validation error returned by
// GetCurrentUserRequest.Validate if the designated constraints aren't met.
type GetCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserRequestValidationError) ErrorName() string {
	return "GetCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserRequestValidationError{}

// Validate checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserResponseMultiError, or nil if none found.
func (m *GetCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCurrentUserResponseMultiError(errors)
	}

	return nil
}

// GetCurrentUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserResponseMultiError) AllErrors() []error { return m }

// GetCurrentUserResponseValidationError is the validation error returned by
// GetCurrentUserResponse.Validate if the designated constraints aren't met.
type GetCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserResponseValidationError) ErrorName() string {
	return "GetCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserResponseValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserResponseMultiError, or nil if none found.
func (m *UpdateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserResponseMultiError(errors)
	}

	return nil
}

// UpdateUserResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserResponseMultiError) AllErrors() []error { return m }

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on UpdateCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserResponseMultiError, or nil if none found.
func (m *UpdateCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCurrentUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCurrentUserResponseMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCurrentUserResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserResponseMultiError) AllErrors() []error { return m }

// UpdateCurrentUserResponseValidationError is the validation error returned by
// UpdateCurrentUserResponse.Validate if the designated constraints aren't met.
type UpdateCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserResponseValidationError) ErrorName() string {
	return "UpdateCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on ListCurrentUserGroupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCurrentUserGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrentUserGroupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCurrentUserGroupsRequestMultiError, or nil if none found.
func (m *ListCurrentUserGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrentUserGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCurrentUserGroupsRequestMultiError(errors)
	}

	return nil
}

// ListCurrentUserGroupsRequestMultiError is an error wrapping multiple
// validation errors returned by ListCurrentUserGroupsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCurrentUserGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrentUserGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrentUserGroupsRequestMultiError) AllErrors() []error { return m }

// ListCurrentUserGroupsRequestValidationError is the validation error returned
// by ListCurrentUserGroupsRequest.Validate if the designated constraints
// aren't met.
type ListCurrentUserGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrentUserGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrentUserGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrentUserGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrentUserGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrentUserGroupsRequestValidationError) ErrorName() string {
	return "ListCurrentUserGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrentUserGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrentUserGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrentUserGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrentUserGroupsRequestValidationError{}

// Validate checks the field values on ListCurrentUserGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCurrentUserGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrentUserGroupsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCurrentUserGroupsResponseMultiError, or nil if none found.
func (m *ListCurrentUserGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrentUserGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCurrentUserGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCurrentUserGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCurrentUserGroupsResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCurrentUserGroupsResponseMultiError(errors)
	}

	return nil
}

// ListCurrentUserGroupsResponseMultiError is an error wrapping multiple
// validation errors returned by ListCurrentUserGroupsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListCurrentUserGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrentUserGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrentUserGroupsResponseMultiError) AllErrors() []error { return m }

// ListCurrentUserGroupsResponseValidationError is the validation error
// returned by ListCurrentUserGroupsResponse.Validate if the designated
// constraints aren't met.
type ListCurrentUserGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrentUserGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrentUserGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrentUserGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrentUserGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrentUserGroupsResponseValidationError) ErrorName() string {
	return "ListCurrentUserGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrentUserGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrentUserGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrentUserGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrentUserGroupsResponseValidationError{}

// Validate checks the field values on ListUserGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserGroupsRequestMultiError, or nil if none found.
func (m *ListUserGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Role

	if len(errors) > 0 {
		return ListUserGroupsRequestMultiError(errors)
	}

	return nil
}

// ListUserGroupsRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserGroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupsRequestMultiError) AllErrors() []error { return m }

// ListUserGroupsRequestValidationError is the validation error returned by
// ListUserGroupsRequest.Validate if the designated constraints aren't met.
type ListUserGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupsRequestValidationError) ErrorName() string {
	return "ListUserGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupsRequestValidationError{}

// Validate checks the field values on GroupRequestBody with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupRequestBodyMultiError, or nil if none found.
func (m *GroupRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GroupRequestBody_Name_Pattern.MatchString(m.GetName()) {
		err := GroupRequestBodyValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrgId

	if len(errors) > 0 {
		return GroupRequestBodyMultiError(errors)
	}

	return nil
}

// GroupRequestBodyMultiError is an error wrapping multiple validation errors
// returned by GroupRequestBody.ValidateAll() if the designated constraints
// aren't met.
type GroupRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupRequestBodyMultiError) AllErrors() []error { return m }

// GroupRequestBodyValidationError is the validation error returned by
// GroupRequestBody.Validate if the designated constraints aren't met.
type GroupRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupRequestBodyValidationError) ErrorName() string { return "GroupRequestBodyValidationError" }

// Error satisfies the builtin error interface
func (e GroupRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupRequestBodyValidationError{}

var _GroupRequestBody_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]+$")

// Validate checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupRequestMultiError, or nil if none found.
func (m *CreateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGroupRequestMultiError(errors)
	}

	return nil
}

// CreateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupRequestMultiError) AllErrors() []error { return m }

// CreateGroupRequestValidationError is the validation error returned by
// CreateGroupRequest.Validate if the designated constraints aren't met.
type CreateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupRequestValidationError) ErrorName() string {
	return "CreateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupRequestValidationError{}

// Validate checks the field values on ListUserGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserGroupsResponseMultiError, or nil if none found.
func (m *ListUserGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserGroupsResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserGroupsResponseMultiError(errors)
	}

	return nil
}

// ListUserGroupsResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupsResponseMultiError) AllErrors() []error { return m }

// ListUserGroupsResponseValidationError is the validation error returned by
// ListUserGroupsResponse.Validate if the designated constraints aren't met.
type ListUserGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupsResponseValidationError) ErrorName() string {
	return "ListUserGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupsResponseValidationError{}

// Validate checks the field values on CreateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupResponseMultiError, or nil if none found.
func (m *CreateGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGroupResponseMultiError(errors)
	}

	return nil
}

// CreateGroupResponseMultiError is an error wrapping multiple validation
// errors returned by CreateGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupResponseMultiError) AllErrors() []error { return m }

// CreateGroupResponseValidationError is the validation error returned by
// CreateGroupResponse.Validate if the designated constraints aren't met.
type CreateGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupResponseValidationError) ErrorName() string {
	return "CreateGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupResponseValidationError{}

// Validate checks the field values on GetGroupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupResponseMultiError, or nil if none found.
func (m *GetGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupResponseMultiError(errors)
	}

	return nil
}

// GetGroupResponseMultiError is an error wrapping multiple validation errors
// returned by GetGroupResponse.ValidateAll() if the designated constraints
// aren't met.
type GetGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupResponseMultiError) AllErrors() []error { return m }

// GetGroupResponseValidationError is the validation error returned by
// GetGroupResponse.Validate if the designated constraints aren't met.
type GetGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupResponseValidationError) ErrorName() string { return "GetGroupResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupResponseValidationError{}

// Validate checks the field values on UpdateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupResponseMultiError, or nil if none found.
func (m *UpdateGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGroupResponseMultiError(errors)
	}

	return nil
}

// UpdateGroupResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupResponseMultiError) AllErrors() []error { return m }

// UpdateGroupResponseValidationError is the validation error returned by
// UpdateGroupResponse.Validate if the designated constraints aren't met.
type UpdateGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupResponseValidationError) ErrorName() string {
	return "UpdateGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupResponseValidationError{}

// Validate checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupRequestMultiError, or nil if none found.
func (m *UpdateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGroupRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGroupRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupRequestMultiError) AllErrors() []error { return m }

// UpdateGroupRequestValidationError is the validation error returned by
// UpdateGroupRequest.Validate if the designated constraints aren't met.
type UpdateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupRequestValidationError) ErrorName() string {
	return "UpdateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupRequestValidationError{}

// Validate checks the field values on UpdateCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserRequestMultiError, or nil if none found.
func (m *UpdateCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCurrentUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCurrentUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCurrentUserRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCurrentUserRequestMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserRequestMultiError) AllErrors() []error { return m }

// UpdateCurrentUserRequestValidationError is the validation error returned by
// UpdateCurrentUserRequest.Validate if the designated constraints aren't met.
type UpdateCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserRequestValidationError) ErrorName() string {
	return "UpdateCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserRequestValidationError{}

// Validate checks the field values on GetGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestMultiError, or nil if none found.
func (m *GetGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	if len(errors) > 0 {
		return GetGroupRequestMultiError(errors)
	}

	return nil
}

// GetGroupRequestMultiError is an error wrapping multiple validation errors
// returned by GetGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestMultiError) AllErrors() []error { return m }

// GetGroupRequestValidationError is the validation error returned by
// GetGroupRequest.Validate if the designated constraints aren't met.
type GetGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestValidationError) ErrorName() string { return "GetGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestValidationError{}

// Validate checks the field values on ListOrganizationGroupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationGroupsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationGroupsRequestMultiError, or nil if none found.
func (m *ListOrganizationGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListOrganizationGroupsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListOrganizationGroupsRequest_OrgId_Pattern.MatchString(m.GetOrgId()) {
		err := ListOrganizationGroupsRequestValidationError{
			field:  "OrgId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	if len(errors) > 0 {
		return ListOrganizationGroupsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationGroupsRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationGroupsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationGroupsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationGroupsRequestValidationError is the validation error
// returned by ListOrganizationGroupsRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationGroupsRequestValidationError) ErrorName() string {
	return "ListOrganizationGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationGroupsRequestValidationError{}

var _ListOrganizationGroupsRequest_OrgId_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListOrganizationGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationGroupsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationGroupsResponseMultiError, or nil if none found.
func (m *ListOrganizationGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationGroupsResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationGroupsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationGroupsResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationGroupsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationGroupsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationGroupsResponseValidationError is the validation error
// returned by ListOrganizationGroupsResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationGroupsResponseValidationError) ErrorName() string {
	return "ListOrganizationGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationGroupsResponseValidationError{}

// Validate checks the field values on CreateOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrganizationRoleRequestMultiError, or nil if none found.
func (m *CreateOrganizationRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationRoleRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationRoleRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationRoleRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationRoleRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationRoleRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationRoleRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateOrganizationRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationRoleRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationRoleRequestValidationError is the validation error
// returned by CreateOrganizationRoleRequest.Validate if the designated
// constraints aren't met.
type CreateOrganizationRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationRoleRequestValidationError) ErrorName() string {
	return "CreateOrganizationRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationRoleRequestValidationError{}

// Validate checks the field values on CreateOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationRoleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrganizationRoleResponseMultiError, or nil if none found.
func (m *CreateOrganizationRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationRoleResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationRoleResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationRoleResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateOrganizationRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationRoleResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationRoleResponseValidationError is the validation error
// returned by CreateOrganizationRoleResponse.Validate if the designated
// constraints aren't met.
type CreateOrganizationRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationRoleResponseValidationError) ErrorName() string {
	return "CreateOrganizationRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationRoleResponseValidationError{}

// Validate checks the field values on GetOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRoleRequestMultiError, or nil if none found.
func (m *GetOrganizationRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := GetOrganizationRoleRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationRoleRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationRoleRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRoleRequestMultiError) AllErrors() []error { return m }

// GetOrganizationRoleRequestValidationError is the validation error returned
// by GetOrganizationRoleRequest.Validate if the designated constraints aren't met.
type GetOrganizationRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRoleRequestValidationError) ErrorName() string {
	return "GetOrganizationRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRoleRequestValidationError{}

// Validate checks the field values on GetOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRoleResponseMultiError, or nil if none found.
func (m *GetOrganizationRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationRoleResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationRoleResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationRoleResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRoleResponseMultiError) AllErrors() []error { return m }

// GetOrganizationRoleResponseValidationError is the validation error returned
// by GetOrganizationRoleResponse.Validate if the designated constraints
// aren't met.
type GetOrganizationRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRoleResponseValidationError) ErrorName() string {
	return "GetOrganizationRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRoleResponseValidationError{}

// Validate checks the field values on UpdateOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrganizationRoleRequestMultiError, or nil if none found.
func (m *UpdateOrganizationRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationRoleRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationRoleRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationRoleRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationRoleRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationRoleRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateOrganizationRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationRoleRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationRoleRequestValidationError is the validation error
// returned by UpdateOrganizationRoleRequest.Validate if the designated
// constraints aren't met.
type UpdateOrganizationRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationRoleRequestValidationError) ErrorName() string {
	return "UpdateOrganizationRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationRoleRequestValidationError{}

// Validate checks the field values on UpdateOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationRoleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrganizationRoleResponseMultiError, or nil if none found.
func (m *UpdateOrganizationRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationRoleResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationRoleResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationRoleResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateOrganizationRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationRoleResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationRoleResponseValidationError is the validation error
// returned by UpdateOrganizationRoleResponse.Validate if the designated
// constraints aren't met.
type UpdateOrganizationRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationRoleResponseValidationError) ErrorName() string {
	return "UpdateOrganizationRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationRoleResponseValidationError{}

// Validate checks the field values on ListRolesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesRequestMultiError, or nil if none found.
func (m *ListRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	if len(errors) > 0 {
		return ListRolesRequestMultiError(errors)
	}

	return nil
}

// ListRolesRequestMultiError is an error wrapping multiple validation errors
// returned by ListRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesRequestMultiError) AllErrors() []error { return m }

// ListRolesRequestValidationError is the validation error returned by
// ListRolesRequest.Validate if the designated constraints aren't met.
type ListRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesRequestValidationError) ErrorName() string { return "ListRolesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesRequestValidationError{}

// Validate checks the field values on ListRolesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesResponseMultiError, or nil if none found.
func (m *ListRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRolesResponseMultiError(errors)
	}

	return nil
}

// ListRolesResponseMultiError is an error wrapping multiple validation errors
// returned by ListRolesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesResponseMultiError) AllErrors() []error { return m }

// ListRolesResponseValidationError is the validation error returned by
// ListRolesResponse.Validate if the designated constraints aren't met.
type ListRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesResponseValidationError) ErrorName() string {
	return "ListRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesResponseValidationError{}

// Validate checks the field values on ListOrganizationRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationRolesRequestMultiError, or nil if none found.
func (m *ListOrganizationRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListOrganizationRolesRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	if len(errors) > 0 {
		return ListOrganizationRolesRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationRolesRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationRolesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListOrganizationRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationRolesRequestMultiError) AllErrors() []error { return m }

// ListOrganizationRolesRequestValidationError is the validation error returned
// by ListOrganizationRolesRequest.Validate if the designated constraints
// aren't met.
type ListOrganizationRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationRolesRequestValidationError) ErrorName() string {
	return "ListOrganizationRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationRolesRequestValidationError{}

// Validate checks the field values on ListOrganizationRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationRolesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationRolesResponseMultiError, or nil if none found.
func (m *ListOrganizationRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationRolesResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationRolesResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationRolesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationRolesResponseMultiError) AllErrors() []error { return m }

// ListOrganizationRolesResponseValidationError is the validation error
// returned by ListOrganizationRolesResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationRolesResponseValidationError) ErrorName() string {
	return "ListOrganizationRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationRolesResponseValidationError{}

// Validate checks the field values on DeleteOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationRoleRequestMultiError, or nil if none found.
func (m *DeleteOrganizationRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := DeleteOrganizationRoleRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrganizationRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationRoleRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationRoleRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteOrganizationRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationRoleRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationRoleRequestValidationError is the validation error
// returned by DeleteOrganizationRoleRequest.Validate if the designated
// constraints aren't met.
type DeleteOrganizationRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationRoleRequestValidationError) ErrorName() string {
	return "DeleteOrganizationRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationRoleRequestValidationError{}

// Validate checks the field values on DeleteOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationRoleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationRoleResponseMultiError, or nil if none found.
func (m *DeleteOrganizationRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationRoleResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationRoleResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationRoleResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteOrganizationRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationRoleResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationRoleResponseValidationError is the validation error
// returned by DeleteOrganizationRoleResponse.Validate if the designated
// constraints aren't met.
type DeleteOrganizationRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationRoleResponseValidationError) ErrorName() string {
	return "DeleteOrganizationRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationRoleResponseValidationError{}

// Validate checks the field values on OrganizationRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationRequestBodyMultiError, or nil if none found.
func (m *OrganizationRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_OrganizationRequestBody_Name_Pattern.MatchString(m.GetName()) {
		err := OrganizationRequestBodyValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_ ]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrganizationRequestBodyMultiError(errors)
	}

	return nil
}

// OrganizationRequestBodyMultiError is an error wrapping multiple validation
// errors returned by OrganizationRequestBody.ValidateAll() if the designated
// constraints aren't met.
type OrganizationRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationRequestBodyMultiError) AllErrors() []error { return m }

// OrganizationRequestBodyValidationError is the validation error returned by
// OrganizationRequestBody.Validate if the designated constraints aren't met.
type OrganizationRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationRequestBodyValidationError) ErrorName() string {
	return "OrganizationRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationRequestBodyValidationError{}

var _OrganizationRequestBody_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9-_ ]+$")

// Validate checks the field values on ListOrganizationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsRequestMultiError, or nil if none found.
func (m *ListOrganizationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for State

	if len(errors) > 0 {
		return ListOrganizationsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationsRequestValidationError is the validation error returned by
// ListOrganizationsRequest.Validate if the designated constraints aren't met.
type ListOrganizationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsRequestValidationError) ErrorName() string {
	return "ListOrganizationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsRequestValidationError{}

// Validate checks the field values on ListOrganizationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsResponseMultiError, or nil if none found.
func (m *ListOrganizationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListOrganizationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationsResponseValidationError is the validation error returned by
// ListOrganizationsResponse.Validate if the designated constraints aren't met.
type ListOrganizationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsResponseValidationError) ErrorName() string {
	return "ListOrganizationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsResponseValidationError{}

// Validate checks the field values on CreateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationRequestMultiError, or nil if none found.
func (m *CreateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationRequestValidationError is the validation error returned by
// CreateOrganizationRequest.Validate if the designated constraints aren't met.
type CreateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationRequestValidationError) ErrorName() string {
	return "CreateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationRequestValidationError{}

// Validate checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationResponseMultiError, or nil if none found.
func (m *CreateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationResponseValidationError is the validation error returned
// by CreateOrganizationResponse.Validate if the designated constraints aren't met.
type CreateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationResponseValidationError) ErrorName() string {
	return "CreateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationResponseValidationError{}

// Validate checks the field values on GetOrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationResponseMultiError, or nil if none found.
func (m *GetOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationResponseMultiError) AllErrors() []error { return m }

// GetOrganizationResponseValidationError is the validation error returned by
// GetOrganizationResponse.Validate if the designated constraints aren't met.
type GetOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationResponseValidationError) ErrorName() string {
	return "GetOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationResponseValidationError{}

// Validate checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationResponseMultiError, or nil if none found.
func (m *UpdateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationResponseValidationError is the validation error returned
// by UpdateOrganizationResponse.Validate if the designated constraints aren't met.
type UpdateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationResponseValidationError) ErrorName() string {
	return "UpdateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationResponseValidationError{}

// Validate checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRequestMultiError, or nil if none found.
func (m *GetOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOrganizationRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRequestMultiError) AllErrors() []error { return m }

// GetOrganizationRequestValidationError is the validation error returned by
// GetOrganizationRequest.Validate if the designated constraints aren't met.
type GetOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRequestValidationError) ErrorName() string {
	return "GetOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRequestValidationError{}

// Validate checks the field values on UpdateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationRequestMultiError, or nil if none found.
func (m *UpdateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationRequestValidationError is the validation error returned by
// UpdateOrganizationRequest.Validate if the designated constraints aren't met.
type UpdateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationRequestValidationError) ErrorName() string {
	return "UpdateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationRequestValidationError{}

// Validate checks the field values on ListOrganizationAdminsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationAdminsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationAdminsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationAdminsRequestMultiError, or nil if none found.
func (m *ListOrganizationAdminsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationAdminsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListOrganizationAdminsRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListOrganizationAdminsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationAdminsRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationAdminsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationAdminsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationAdminsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationAdminsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationAdminsRequestValidationError is the validation error
// returned by ListOrganizationAdminsRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationAdminsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationAdminsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationAdminsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationAdminsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationAdminsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationAdminsRequestValidationError) ErrorName() string {
	return "ListOrganizationAdminsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationAdminsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationAdminsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationAdminsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationAdminsRequestValidationError{}

// Validate checks the field values on ListOrganizationAdminsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationAdminsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationAdminsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationAdminsResponseMultiError, or nil if none found.
func (m *ListOrganizationAdminsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationAdminsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationAdminsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationAdminsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationAdminsResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationAdminsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationAdminsResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationAdminsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationAdminsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationAdminsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationAdminsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationAdminsResponseValidationError is the validation error
// returned by ListOrganizationAdminsResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationAdminsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationAdminsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationAdminsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationAdminsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationAdminsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationAdminsResponseValidationError) ErrorName() string {
	return "ListOrganizationAdminsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationAdminsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationAdminsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationAdminsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationAdminsResponseValidationError{}

// Validate checks the field values on ListOrganizationUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationUsersRequestMultiError, or nil if none found.
func (m *ListOrganizationUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListOrganizationUsersRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PermissionFilter

	if len(errors) > 0 {
		return ListOrganizationUsersRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationUsersRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationUsersRequest.ValidateAll() if
// the designated constraints aren't met.
type ListOrganizationUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationUsersRequestMultiError) AllErrors() []error { return m }

// ListOrganizationUsersRequestValidationError is the validation error returned
// by ListOrganizationUsersRequest.Validate if the designated constraints
// aren't met.
type ListOrganizationUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationUsersRequestValidationError) ErrorName() string {
	return "ListOrganizationUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationUsersRequestValidationError{}

// Validate checks the field values on ListOrganizationUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationUsersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationUsersResponseMultiError, or nil if none found.
func (m *ListOrganizationUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationUsersResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationUsersResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationUsersResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationUsersResponseMultiError) AllErrors() []error { return m }

// ListOrganizationUsersResponseValidationError is the validation error
// returned by ListOrganizationUsersResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationUsersResponseValidationError) ErrorName() string {
	return "ListOrganizationUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationUsersResponseValidationError{}

// Validate checks the field values on AddOrganizationUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrganizationUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrganizationUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrganizationUsersRequestMultiError, or nil if none found.
func (m *AddOrganizationUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrganizationUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := AddOrganizationUsersRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddOrganizationUsersRequestMultiError(errors)
	}

	return nil
}

// AddOrganizationUsersRequestMultiError is an error wrapping multiple
// validation errors returned by AddOrganizationUsersRequest.ValidateAll() if
// the designated constraints aren't met.
type AddOrganizationUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrganizationUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrganizationUsersRequestMultiError) AllErrors() []error { return m }

// AddOrganizationUsersRequestValidationError is the validation error returned
// by AddOrganizationUsersRequest.Validate if the designated constraints
// aren't met.
type AddOrganizationUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationUsersRequestValidationError) ErrorName() string {
	return "AddOrganizationUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationUsersRequestValidationError{}

// Validate checks the field values on AddOrganizationUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrganizationUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrganizationUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrganizationUsersResponseMultiError, or nil if none found.
func (m *AddOrganizationUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrganizationUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOrganizationUsersResponseMultiError(errors)
	}

	return nil
}

// AddOrganizationUsersResponseMultiError is an error wrapping multiple
// validation errors returned by AddOrganizationUsersResponse.ValidateAll() if
// the designated constraints aren't met.
type AddOrganizationUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrganizationUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrganizationUsersResponseMultiError) AllErrors() []error { return m }

// AddOrganizationUsersResponseValidationError is the validation error returned
// by AddOrganizationUsersResponse.Validate if the designated constraints
// aren't met.
type AddOrganizationUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationUsersResponseValidationError) ErrorName() string {
	return "AddOrganizationUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationUsersResponseValidationError{}

// Validate checks the field values on RemoveOrganizationUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOrganizationUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOrganizationUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveOrganizationUserRequestMultiError, or nil if none found.
func (m *RemoveOrganizationUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrganizationUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := RemoveOrganizationUserRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return RemoveOrganizationUserRequestMultiError(errors)
	}

	return nil
}

// RemoveOrganizationUserRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveOrganizationUserRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveOrganizationUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrganizationUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrganizationUserRequestMultiError) AllErrors() []error { return m }

// RemoveOrganizationUserRequestValidationError is the validation error
// returned by RemoveOrganizationUserRequest.Validate if the designated
// constraints aren't met.
type RemoveOrganizationUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrganizationUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrganizationUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrganizationUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrganizationUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrganizationUserRequestValidationError) ErrorName() string {
	return "RemoveOrganizationUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrganizationUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrganizationUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrganizationUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrganizationUserRequestValidationError{}

// Validate checks the field values on RemoveOrganizationUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOrganizationUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOrganizationUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveOrganizationUserResponseMultiError, or nil if none found.
func (m *RemoveOrganizationUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrganizationUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveOrganizationUserResponseMultiError(errors)
	}

	return nil
}

// RemoveOrganizationUserResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveOrganizationUserResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveOrganizationUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrganizationUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrganizationUserResponseMultiError) AllErrors() []error { return m }

// RemoveOrganizationUserResponseValidationError is the validation error
// returned by RemoveOrganizationUserResponse.Validate if the designated
// constraints aren't met.
type RemoveOrganizationUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrganizationUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrganizationUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrganizationUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrganizationUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrganizationUserResponseValidationError) ErrorName() string {
	return "RemoveOrganizationUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrganizationUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrganizationUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrganizationUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrganizationUserResponseValidationError{}

// Validate checks the field values on EnableOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableOrganizationRequestMultiError, or nil if none found.
func (m *EnableOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return EnableOrganizationRequestMultiError(errors)
	}

	return nil
}

// EnableOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by EnableOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type EnableOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableOrganizationRequestMultiError) AllErrors() []error { return m }

// EnableOrganizationRequestValidationError is the validation error returned by
// EnableOrganizationRequest.Validate if the designated constraints aren't met.
type EnableOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableOrganizationRequestValidationError) ErrorName() string {
	return "EnableOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableOrganizationRequestValidationError{}

// Validate checks the field values on EnableOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableOrganizationResponseMultiError, or nil if none found.
func (m *EnableOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableOrganizationResponseMultiError(errors)
	}

	return nil
}

// EnableOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by EnableOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type EnableOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableOrganizationResponseMultiError) AllErrors() []error { return m }

// EnableOrganizationResponseValidationError is the validation error returned
// by EnableOrganizationResponse.Validate if the designated constraints aren't met.
type EnableOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableOrganizationResponseValidationError) ErrorName() string {
	return "EnableOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableOrganizationResponseValidationError{}

// Validate checks the field values on DisableOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableOrganizationRequestMultiError, or nil if none found.
func (m *DisableOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DisableOrganizationRequestMultiError(errors)
	}

	return nil
}

// DisableOrganizationRequestMultiError is an error wrapping multiple
// validation errors returned by DisableOrganizationRequest.ValidateAll() if
// the designated constraints aren't met.
type DisableOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableOrganizationRequestMultiError) AllErrors() []error { return m }

// DisableOrganizationRequestValidationError is the validation error returned
// by DisableOrganizationRequest.Validate if the designated constraints aren't met.
type DisableOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableOrganizationRequestValidationError) ErrorName() string {
	return "DisableOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableOrganizationRequestValidationError{}

// Validate checks the field values on DisableOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableOrganizationResponseMultiError, or nil if none found.
func (m *DisableOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableOrganizationResponseMultiError(errors)
	}

	return nil
}

// DisableOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by DisableOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type DisableOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableOrganizationResponseMultiError) AllErrors() []error { return m }

// DisableOrganizationResponseValidationError is the validation error returned
// by DisableOrganizationResponse.Validate if the designated constraints
// aren't met.
type DisableOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableOrganizationResponseValidationError) ErrorName() string {
	return "DisableOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableOrganizationResponseValidationError{}

// Validate checks the field values on DeleteOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationRequestMultiError, or nil if none found.
func (m *DeleteOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteOrganizationRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationRequestValidationError is the validation error returned by
// DeleteOrganizationRequest.Validate if the designated constraints aren't met.
type DeleteOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationRequestValidationError) ErrorName() string {
	return "DeleteOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationRequestValidationError{}

// Validate checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationResponseMultiError, or nil if none found.
func (m *DeleteOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationResponseValidationError is the validation error returned
// by DeleteOrganizationResponse.Validate if the designated constraints aren't met.
type DeleteOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationResponseValidationError) ErrorName() string {
	return "DeleteOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationResponseValidationError{}

// Validate checks the field values on ProjectRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectRequestBodyMultiError, or nil if none found.
func (m *ProjectRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ProjectRequestBody_Name_Pattern.MatchString(m.GetName()) {
		err := ProjectRequestBodyValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ProjectRequestBodyValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectRequestBodyMultiError(errors)
	}

	return nil
}

// ProjectRequestBodyMultiError is an error wrapping multiple validation errors
// returned by ProjectRequestBody.ValidateAll() if the designated constraints
// aren't met.
type ProjectRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectRequestBodyMultiError) AllErrors() []error { return m }

// ProjectRequestBodyValidationError is the validation error returned by
// ProjectRequestBody.Validate if the designated constraints aren't met.
type ProjectRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectRequestBodyValidationError) ErrorName() string {
	return "ProjectRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectRequestBodyValidationError{}

var _ProjectRequestBody_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]+$")

// Validate checks the field values on CreateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectRequestMultiError, or nil if none found.
func (m *CreateProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProjectRequestMultiError(errors)
	}

	return nil
}

// CreateProjectRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectRequestMultiError) AllErrors() []error { return m }

// CreateProjectRequestValidationError is the validation error returned by
// CreateProjectRequest.Validate if the designated constraints aren't met.
type CreateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectRequestValidationError) ErrorName() string {
	return "CreateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectRequestValidationError{}

// Validate checks the field values on CreateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectResponseMultiError, or nil if none found.
func (m *CreateProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProjectResponseMultiError(errors)
	}

	return nil
}

// CreateProjectResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectResponseMultiError) AllErrors() []error { return m }

// CreateProjectResponseValidationError is the validation error returned by
// CreateProjectResponse.Validate if the designated constraints aren't met.
type CreateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectResponseValidationError) ErrorName() string {
	return "CreateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectResponseValidationError{}

// Validate checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectResponseMultiError, or nil if none found.
func (m *GetProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProjectResponseMultiError(errors)
	}

	return nil
}

// GetProjectResponseMultiError is an error wrapping multiple validation errors
// returned by GetProjectResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectResponseMultiError) AllErrors() []error { return m }

// GetProjectResponseValidationError is the validation error returned by
// GetProjectResponse.Validate if the designated constraints aren't met.
type GetProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectResponseValidationError) ErrorName() string {
	return "GetProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectResponseValidationError{}

// Validate checks the field values on UpdateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectResponseMultiError, or nil if none found.
func (m *UpdateProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectResponseMultiError) AllErrors() []error { return m }

// UpdateProjectResponseValidationError is the validation error returned by
// UpdateProjectResponse.Validate if the designated constraints aren't met.
type UpdateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectResponseValidationError) ErrorName() string {
	return "UpdateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectResponseValidationError{}

// Validate checks the field values on ListOrganizationProjectsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationProjectsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationProjectsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationProjectsRequestMultiError, or nil if none found.
func (m *ListOrganizationProjectsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationProjectsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListOrganizationProjectsRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	if len(errors) > 0 {
		return ListOrganizationProjectsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationProjectsRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationProjectsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationProjectsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationProjectsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationProjectsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationProjectsRequestValidationError is the validation error
// returned by ListOrganizationProjectsRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationProjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationProjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationProjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationProjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationProjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationProjectsRequestValidationError) ErrorName() string {
	return "ListOrganizationProjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationProjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationProjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationProjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationProjectsRequestValidationError{}

// Validate checks the field values on ListOrganizationProjectsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationProjectsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationProjectsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationProjectsResponseMultiError, or nil if none found.
func (m *ListOrganizationProjectsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationProjectsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationProjectsResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationProjectsResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationProjectsResponseValidationError{
					field:  fmt.Sprintf("Projects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationProjectsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationProjectsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationProjectsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationProjectsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationProjectsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationProjectsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationProjectsResponseValidationError is the validation error
// returned by ListOrganizationProjectsResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationProjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationProjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationProjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationProjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationProjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationProjectsResponseValidationError) ErrorName() string {
	return "ListOrganizationProjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationProjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationProjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationProjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationProjectsResponseValidationError{}

// Validate checks the field values on GetProjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectRequestMultiError, or nil if none found.
func (m *GetProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProjectRequestMultiError(errors)
	}

	return nil
}

// GetProjectRequestMultiError is an error wrapping multiple validation errors
// returned by GetProjectRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectRequestMultiError) AllErrors() []error { return m }

// GetProjectRequestValidationError is the validation error returned by
// GetProjectRequest.Validate if the designated constraints aren't met.
type GetProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectRequestValidationError) ErrorName() string {
	return "GetProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectRequestValidationError{}

// Validate checks the field values on UpdateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectRequestMultiError, or nil if none found.
func (m *UpdateProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectRequestMultiError) AllErrors() []error { return m }

// UpdateProjectRequestValidationError is the validation error returned by
// UpdateProjectRequest.Validate if the designated constraints aren't met.
type UpdateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectRequestValidationError) ErrorName() string {
	return "UpdateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectRequestValidationError{}

// Validate checks the field values on ListProjectAdminsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectAdminsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectAdminsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectAdminsRequestMultiError, or nil if none found.
func (m *ListProjectAdminsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectAdminsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListProjectAdminsRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListProjectAdminsRequestMultiError(errors)
	}

	return nil
}

// ListProjectAdminsRequestMultiError is an error wrapping multiple validation
// errors returned by ListProjectAdminsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProjectAdminsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectAdminsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectAdminsRequestMultiError) AllErrors() []error { return m }

// ListProjectAdminsRequestValidationError is the validation error returned by
// ListProjectAdminsRequest.Validate if the designated constraints aren't met.
type ListProjectAdminsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectAdminsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectAdminsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectAdminsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectAdminsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectAdminsRequestValidationError) ErrorName() string {
	return "ListProjectAdminsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectAdminsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectAdminsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectAdminsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectAdminsRequestValidationError{}

// Validate checks the field values on ListProjectAdminsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectAdminsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectAdminsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectAdminsResponseMultiError, or nil if none found.
func (m *ListProjectAdminsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectAdminsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectAdminsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectAdminsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectAdminsResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectAdminsResponseMultiError(errors)
	}

	return nil
}

// ListProjectAdminsResponseMultiError is an error wrapping multiple validation
// errors returned by ListProjectAdminsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListProjectAdminsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectAdminsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectAdminsResponseMultiError) AllErrors() []error { return m }

// ListProjectAdminsResponseValidationError is the validation error returned by
// ListProjectAdminsResponse.Validate if the designated constraints aren't met.
type ListProjectAdminsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectAdminsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectAdminsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectAdminsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectAdminsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectAdminsResponseValidationError) ErrorName() string {
	return "ListProjectAdminsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectAdminsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectAdminsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectAdminsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectAdminsResponseValidationError{}

// Validate checks the field values on ListProjectUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectUsersRequestMultiError, or nil if none found.
func (m *ListProjectUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListProjectUsersRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PermissionFilter

	if len(errors) > 0 {
		return ListProjectUsersRequestMultiError(errors)
	}

	return nil
}

// ListProjectUsersRequestMultiError is an error wrapping multiple validation
// errors returned by ListProjectUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProjectUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectUsersRequestMultiError) AllErrors() []error { return m }

// ListProjectUsersRequestValidationError is the validation error returned by
// ListProjectUsersRequest.Validate if the designated constraints aren't met.
type ListProjectUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectUsersRequestValidationError) ErrorName() string {
	return "ListProjectUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectUsersRequestValidationError{}

// Validate checks the field values on ListProjectUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectUsersResponseMultiError, or nil if none found.
func (m *ListProjectUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectUsersResponseMultiError(errors)
	}

	return nil
}

// ListProjectUsersResponseMultiError is an error wrapping multiple validation
// errors returned by ListProjectUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProjectUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectUsersResponseMultiError) AllErrors() []error { return m }

// ListProjectUsersResponseValidationError is the validation error returned by
// ListProjectUsersResponse.Validate if the designated constraints aren't met.
type ListProjectUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectUsersResponseValidationError) ErrorName() string {
	return "ListProjectUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectUsersResponseValidationError{}

// Validate checks the field values on EnableProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableProjectRequestMultiError, or nil if none found.
func (m *EnableProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return EnableProjectRequestMultiError(errors)
	}

	return nil
}

// EnableProjectRequestMultiError is an error wrapping multiple validation
// errors returned by EnableProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type EnableProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableProjectRequestMultiError) AllErrors() []error { return m }

// EnableProjectRequestValidationError is the validation error returned by
// EnableProjectRequest.Validate if the designated constraints aren't met.
type EnableProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableProjectRequestValidationError) ErrorName() string {
	return "EnableProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableProjectRequestValidationError{}

// Validate checks the field values on EnableProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableProjectResponseMultiError, or nil if none found.
func (m *EnableProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableProjectResponseMultiError(errors)
	}

	return nil
}

// EnableProjectResponseMultiError is an error wrapping multiple validation
// errors returned by EnableProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type EnableProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableProjectResponseMultiError) AllErrors() []error { return m }

// EnableProjectResponseValidationError is the validation error returned by
// EnableProjectResponse.Validate if the designated constraints aren't met.
type EnableProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableProjectResponseValidationError) ErrorName() string {
	return "EnableProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableProjectResponseValidationError{}

// Validate checks the field values on DisableProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableProjectRequestMultiError, or nil if none found.
func (m *DisableProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DisableProjectRequestMultiError(errors)
	}

	return nil
}

// DisableProjectRequestMultiError is an error wrapping multiple validation
// errors returned by DisableProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type DisableProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableProjectRequestMultiError) AllErrors() []error { return m }

// DisableProjectRequestValidationError is the validation error returned by
// DisableProjectRequest.Validate if the designated constraints aren't met.
type DisableProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableProjectRequestValidationError) ErrorName() string {
	return "DisableProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableProjectRequestValidationError{}

// Validate checks the field values on DisableProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableProjectResponseMultiError, or nil if none found.
func (m *DisableProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableProjectResponseMultiError(errors)
	}

	return nil
}

// DisableProjectResponseMultiError is an error wrapping multiple validation
// errors returned by DisableProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type DisableProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableProjectResponseMultiError) AllErrors() []error { return m }

// DisableProjectResponseValidationError is the validation error returned by
// DisableProjectResponse.Validate if the designated constraints aren't met.
type DisableProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableProjectResponseValidationError) ErrorName() string {
	return "DisableProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableProjectResponseValidationError{}

// Validate checks the field values on DeleteProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectRequestMultiError, or nil if none found.
func (m *DeleteProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProjectRequestMultiError(errors)
	}

	return nil
}

// DeleteProjectRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectRequestMultiError) AllErrors() []error { return m }

// DeleteProjectRequestValidationError is the validation error returned by
// DeleteProjectRequest.Validate if the designated constraints aren't met.
type DeleteProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectRequestValidationError) ErrorName() string {
	return "DeleteProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectRequestValidationError{}

// Validate checks the field values on DeleteProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectResponseMultiError, or nil if none found.
func (m *DeleteProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProjectResponseMultiError(errors)
	}

	return nil
}

// DeleteProjectResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectResponseMultiError) AllErrors() []error { return m }

// DeleteProjectResponseValidationError is the validation error returned by
// DeleteProjectResponse.Validate if the designated constraints aren't met.
type DeleteProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectResponseValidationError) ErrorName() string {
	return "DeleteProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectResponseValidationError{}

// Validate checks the field values on PolicyRequestBody with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PolicyRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyRequestBodyMultiError, or nil if none found.
func (m *PolicyRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Title

	// no validation rules for Resource

	// no validation rules for Principal

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicyRequestBodyMultiError(errors)
	}

	return nil
}

// PolicyRequestBodyMultiError is an error wrapping multiple validation errors
// returned by PolicyRequestBody.ValidateAll() if the designated constraints
// aren't met.
type PolicyRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyRequestBodyMultiError) AllErrors() []error { return m }

// PolicyRequestBodyValidationError is the validation error returned by
// PolicyRequestBody.Validate if the designated constraints aren't met.
type PolicyRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyRequestBodyValidationError) ErrorName() string {
	return "PolicyRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyRequestBodyValidationError{}

// Validate checks the field values on GetPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionRequestMultiError, or nil if none found.
func (m *GetPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPermissionRequestMultiError(errors)
	}

	return nil
}

// GetPermissionRequestMultiError is an error wrapping multiple validation
// errors returned by GetPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionRequestMultiError) AllErrors() []error { return m }

// GetPermissionRequestValidationError is the validation error returned by
// GetPermissionRequest.Validate if the designated constraints aren't met.
type GetPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionRequestValidationError) ErrorName() string {
	return "GetPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionRequestValidationError{}

// Validate checks the field values on GetPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionResponseMultiError, or nil if none found.
func (m *GetPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPermissionResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPermissionResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPermissionResponseValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPermissionResponseMultiError(errors)
	}

	return nil
}

// GetPermissionResponseMultiError is an error wrapping multiple validation
// errors returned by GetPermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionResponseMultiError) AllErrors() []error { return m }

// GetPermissionResponseValidationError is the validation error returned by
// GetPermissionResponse.Validate if the designated constraints aren't met.
type GetPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionResponseValidationError) ErrorName() string {
	return "GetPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionResponseValidationError{}

// Validate checks the field values on ListPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPermissionsRequestMultiError, or nil if none found.
func (m *ListPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPermissionsRequestMultiError(errors)
	}

	return nil
}

// ListPermissionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListPermissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionsRequestMultiError) AllErrors() []error { return m }

// ListPermissionsRequestValidationError is the validation error returned by
// ListPermissionsRequest.Validate if the designated constraints aren't met.
type ListPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsRequestValidationError) ErrorName() string {
	return "ListPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsRequestValidationError{}

// Validate checks the field values on ListPermissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPermissionsResponseMultiError, or nil if none found.
func (m *ListPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPermissionsResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPermissionsResponseMultiError(errors)
	}

	return nil
}

// ListPermissionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListPermissionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionsResponseMultiError) AllErrors() []error { return m }

// ListPermissionsResponseValidationError is the validation error returned by
// ListPermissionsResponse.Validate if the designated constraints aren't met.
type ListPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsResponseValidationError) ErrorName() string {
	return "ListPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsResponseValidationError{}

// Validate checks the field values on ListNamespacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespacesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespacesRequestMultiError, or nil if none found.
func (m *ListNamespacesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespacesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListNamespacesRequestMultiError(errors)
	}

	return nil
}

// ListNamespacesRequestMultiError is an error wrapping multiple validation
// errors returned by ListNamespacesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListNamespacesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespacesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespacesRequestMultiError) AllErrors() []error { return m }

// ListNamespacesRequestValidationError is the validation error returned by
// ListNamespacesRequest.Validate if the designated constraints aren't met.
type ListNamespacesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacesRequestValidationError) ErrorName() string {
	return "ListNamespacesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacesRequestValidationError{}

// Validate checks the field values on ListNamespacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespacesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespacesResponseMultiError, or nil if none found.
func (m *ListNamespacesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespacesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNamespaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNamespacesResponseValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNamespacesResponseValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNamespacesResponseValidationError{
					field:  fmt.Sprintf("Namespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListNamespacesResponseMultiError(errors)
	}

	return nil
}

// ListNamespacesResponseMultiError is an error wrapping multiple validation
// errors returned by ListNamespacesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListNamespacesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespacesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespacesResponseMultiError) AllErrors() []error { return m }

// ListNamespacesResponseValidationError is the validation error returned by
// ListNamespacesResponse.Validate if the designated constraints aren't met.
type ListNamespacesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacesResponseValidationError) ErrorName() string {
	return "ListNamespacesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacesResponseValidationError{}

// Validate checks the field values on GetNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceRequestMultiError, or nil if none found.
func (m *GetNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetNamespaceRequestMultiError(errors)
	}

	return nil
}

// GetNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by GetNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceRequestMultiError) AllErrors() []error { return m }

// GetNamespaceRequestValidationError is the validation error returned by
// GetNamespaceRequest.Validate if the designated constraints aren't met.
type GetNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceRequestValidationError) ErrorName() string {
	return "GetNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceRequestValidationError{}

// Validate checks the field values on GetNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceResponseMultiError, or nil if none found.
func (m *GetNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNamespace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNamespaceResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNamespaceResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNamespaceResponseValidationError{
				field:  "Namespace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNamespaceResponseMultiError(errors)
	}

	return nil
}

// GetNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by GetNamespaceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceResponseMultiError) AllErrors() []error { return m }

// GetNamespaceResponseValidationError is the validation error returned by
// GetNamespaceResponse.Validate if the designated constraints aren't met.
type GetNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceResponseValidationError) ErrorName() string {
	return "GetNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceResponseValidationError{}

// Validate checks the field values on CreatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePolicyRequestMultiError, or nil if none found.
func (m *CreatePolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePolicyRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePolicyRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePolicyRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePolicyRequestMultiError(errors)
	}

	return nil
}

// CreatePolicyRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePolicyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicyRequestMultiError) AllErrors() []error { return m }

// CreatePolicyRequestValidationError is the validation error returned by
// CreatePolicyRequest.Validate if the designated constraints aren't met.
type CreatePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyRequestValidationError) ErrorName() string {
	return "CreatePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyRequestValidationError{}

// Validate checks the field values on CreatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePolicyResponseMultiError, or nil if none found.
func (m *CreatePolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePolicyResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePolicyResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePolicyResponseMultiError(errors)
	}

	return nil
}

// CreatePolicyResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePolicyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicyResponseMultiError) AllErrors() []error { return m }

// CreatePolicyResponseValidationError is the validation error returned by
// CreatePolicyResponse.Validate if the designated constraints aren't met.
type CreatePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyResponseValidationError) ErrorName() string {
	return "CreatePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyResponseValidationError{}

// Validate checks the field values on GetPolicyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPolicyRequestMultiError, or nil if none found.
func (m *GetPolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPolicyRequestMultiError(errors)
	}

	return nil
}

// GetPolicyRequestMultiError is an error wrapping multiple validation errors
// returned by GetPolicyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPolicyRequestMultiError) AllErrors() []error { return m }

// GetPolicyRequestValidationError is the validation error returned by
// GetPolicyRequest.Validate if the designated constraints aren't met.
type GetPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicyRequestValidationError) ErrorName() string { return "GetPolicyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicyRequestValidationError{}

// Validate checks the field values on GetPolicyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPolicyResponseMultiError, or nil if none found.
func (m *GetPolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPolicyResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPolicyResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPolicyResponseMultiError(errors)
	}

	return nil
}

// GetPolicyResponseMultiError is an error wrapping multiple validation errors
// returned by GetPolicyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPolicyResponseMultiError) AllErrors() []error { return m }

// GetPolicyResponseValidationError is the validation error returned by
// GetPolicyResponse.Validate if the designated constraints aren't met.
type GetPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicyResponseValidationError) ErrorName() string {
	return "GetPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicyResponseValidationError{}

// Validate checks the field values on UpdatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePolicyRequestMultiError, or nil if none found.
func (m *UpdatePolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePolicyRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePolicyRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePolicyRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePolicyRequestMultiError(errors)
	}

	return nil
}

// UpdatePolicyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePolicyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePolicyRequestMultiError) AllErrors() []error { return m }

// UpdatePolicyRequestValidationError is the validation error returned by
// UpdatePolicyRequest.Validate if the designated constraints aren't met.
type UpdatePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePolicyRequestValidationError) ErrorName() string {
	return "UpdatePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePolicyRequestValidationError{}

// Validate checks the field values on UpdatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePolicyResponseMultiError, or nil if none found.
func (m *UpdatePolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePolicyResponseValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePolicyResponseValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePolicyResponseValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdatePolicyResponseMultiError(errors)
	}

	return nil
}

// UpdatePolicyResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePolicyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePolicyResponseMultiError) AllErrors() []error { return m }

// UpdatePolicyResponseValidationError is the validation error returned by
// UpdatePolicyResponse.Validate if the designated constraints aren't met.
type UpdatePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePolicyResponseValidationError) ErrorName() string {
	return "UpdatePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePolicyResponseValidationError{}

// Validate checks the field values on DeletePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePolicyRequestMultiError, or nil if none found.
func (m *DeletePolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePolicyRequestMultiError(errors)
	}

	return nil
}

// DeletePolicyRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePolicyRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePolicyRequestMultiError) AllErrors() []error { return m }

// DeletePolicyRequestValidationError is the validation error returned by
// DeletePolicyRequest.Validate if the designated constraints aren't met.
type DeletePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePolicyRequestValidationError) ErrorName() string {
	return "DeletePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePolicyRequestValidationError{}

// Validate checks the field values on DeletePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePolicyResponseMultiError, or nil if none found.
func (m *DeletePolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePolicyResponseMultiError(errors)
	}

	return nil
}

// DeletePolicyResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePolicyResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePolicyResponseMultiError) AllErrors() []error { return m }

// DeletePolicyResponseValidationError is the validation error returned by
// DeletePolicyResponse.Validate if the designated constraints aren't met.
type DeletePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePolicyResponseValidationError) ErrorName() string {
	return "DeletePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePolicyResponseValidationError{}

// Validate checks the field values on RelationRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationRequestBodyMultiError, or nil if none found.
func (m *RelationRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Object

	// no validation rules for Subject

	// no validation rules for Relation

	// no validation rules for SubjectSubRelation

	if len(errors) > 0 {
		return RelationRequestBodyMultiError(errors)
	}

	return nil
}

// RelationRequestBodyMultiError is an error wrapping multiple validation
// errors returned by RelationRequestBody.ValidateAll() if the designated
// constraints aren't met.
type RelationRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationRequestBodyMultiError) AllErrors() []error { return m }

// RelationRequestBodyValidationError is the validation error returned by
// RelationRequestBody.Validate if the designated constraints aren't met.
type RelationRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationRequestBodyValidationError) ErrorName() string {
	return "RelationRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e RelationRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationRequestBodyValidationError{}

// Validate checks the field values on CreateRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRelationRequestMultiError, or nil if none found.
func (m *CreateRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRelationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRelationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRelationRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRelationRequestMultiError(errors)
	}

	return nil
}

// CreateRelationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateRelationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRelationRequestMultiError) AllErrors() []error { return m }

// CreateRelationRequestValidationError is the validation error returned by
// CreateRelationRequest.Validate if the designated constraints aren't met.
type CreateRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRelationRequestValidationError) ErrorName() string {
	return "CreateRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRelationRequestValidationError{}

// Validate checks the field values on CreateRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRelationResponseMultiError, or nil if none found.
func (m *CreateRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRelationResponseValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRelationResponseValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRelationResponseValidationError{
				field:  "Relation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRelationResponseMultiError(errors)
	}

	return nil
}

// CreateRelationResponseMultiError is an error wrapping multiple validation
// errors returned by CreateRelationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRelationResponseMultiError) AllErrors() []error { return m }

// CreateRelationResponseValidationError is the validation error returned by
// CreateRelationResponse.Validate if the designated constraints aren't met.
type CreateRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRelationResponseValidationError) ErrorName() string {
	return "CreateRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRelationResponseValidationError{}

// Validate checks the field values on GetRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRelationRequestMultiError, or nil if none found.
func (m *GetRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRelationRequestMultiError(errors)
	}

	return nil
}

// GetRelationRequestMultiError is an error wrapping multiple validation errors
// returned by GetRelationRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRelationRequestMultiError) AllErrors() []error { return m }

// GetRelationRequestValidationError is the validation error returned by
// GetRelationRequest.Validate if the designated constraints aren't met.
type GetRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelationRequestValidationError) ErrorName() string {
	return "GetRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelationRequestValidationError{}

// Validate checks the field values on GetRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRelationResponseMultiError, or nil if none found.
func (m *GetRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRelationResponseValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRelationResponseValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRelationResponseValidationError{
				field:  "Relation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRelationResponseMultiError(errors)
	}

	return nil
}

// GetRelationResponseMultiError is an error wrapping multiple validation
// errors returned by GetRelationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRelationResponseMultiError) AllErrors() []error { return m }

// GetRelationResponseValidationError is the validation error returned by
// GetRelationResponse.Validate if the designated constraints aren't met.
type GetRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelationResponseValidationError) ErrorName() string {
	return "GetRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelationResponseValidationError{}

// Validate checks the field values on UpdateRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRelationRequestMultiError, or nil if none found.
func (m *UpdateRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRelationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRelationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRelationRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRelationRequestMultiError(errors)
	}

	return nil
}

// UpdateRelationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRelationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRelationRequestMultiError) AllErrors() []error { return m }

// UpdateRelationRequestValidationError is the validation error returned by
// UpdateRelationRequest.Validate if the designated constraints aren't met.
type UpdateRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRelationRequestValidationError) ErrorName() string {
	return "UpdateRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRelationRequestValidationError{}

// Validate checks the field values on UpdateRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRelationResponseMultiError, or nil if none found.
func (m *UpdateRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRelationResponseValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRelationResponseValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRelationResponseValidationError{
				field:  "Relation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRelationResponseMultiError(errors)
	}

	return nil
}

// UpdateRelationResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateRelationResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRelationResponseMultiError) AllErrors() []error { return m }

// UpdateRelationResponseValidationError is the validation error returned by
// UpdateRelationResponse.Validate if the designated constraints aren't met.
type UpdateRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRelationResponseValidationError) ErrorName() string {
	return "UpdateRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRelationResponseValidationError{}

// Validate checks the field values on ListGroupUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupUsersRequestMultiError, or nil if none found.
func (m *ListGroupUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	if len(errors) > 0 {
		return ListGroupUsersRequestMultiError(errors)
	}

	return nil
}

// ListGroupUsersRequestMultiError is an error wrapping multiple validation
// errors returned by ListGroupUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListGroupUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupUsersRequestMultiError) AllErrors() []error { return m }

// ListGroupUsersRequestValidationError is the validation error returned by
// ListGroupUsersRequest.Validate if the designated constraints aren't met.
type ListGroupUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupUsersRequestValidationError) ErrorName() string {
	return "ListGroupUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupUsersRequestValidationError{}

// Validate checks the field values on ListGroupUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupUsersResponseMultiError, or nil if none found.
func (m *ListGroupUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGroupUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGroupUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGroupUsersResponseMultiError(errors)
	}

	return nil
}

// ListGroupUsersResponseMultiError is an error wrapping multiple validation
// errors returned by ListGroupUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListGroupUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupUsersResponseMultiError) AllErrors() []error { return m }

// ListGroupUsersResponseValidationError is the validation error returned by
// ListGroupUsersResponse.Validate if the designated constraints aren't met.
type ListGroupUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupUsersResponseValidationError) ErrorName() string {
	return "ListGroupUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupUsersResponseValidationError{}

// Validate checks the field values on EnableGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableGroupRequestMultiError, or nil if none found.
func (m *EnableGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := EnableGroupRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnableGroupRequestMultiError(errors)
	}

	return nil
}

// EnableGroupRequestMultiError is an error wrapping multiple validation errors
// returned by EnableGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type EnableGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableGroupRequestMultiError) AllErrors() []error { return m }

// EnableGroupRequestValidationError is the validation error returned by
// EnableGroupRequest.Validate if the designated constraints aren't met.
type EnableGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableGroupRequestValidationError) ErrorName() string {
	return "EnableGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableGroupRequestValidationError{}

// Validate checks the field values on EnableGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableGroupResponseMultiError, or nil if none found.
func (m *EnableGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableGroupResponseMultiError(errors)
	}

	return nil
}

// EnableGroupResponseMultiError is an error wrapping multiple validation
// errors returned by EnableGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type EnableGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableGroupResponseMultiError) AllErrors() []error { return m }

// EnableGroupResponseValidationError is the validation error returned by
// EnableGroupResponse.Validate if the designated constraints aren't met.
type EnableGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableGroupResponseValidationError) ErrorName() string {
	return "EnableGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableGroupResponseValidationError{}

// Validate checks the field values on DisableGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableGroupRequestMultiError, or nil if none found.
func (m *DisableGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := DisableGroupRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DisableGroupRequestMultiError(errors)
	}

	return nil
}

// DisableGroupRequestMultiError is an error wrapping multiple validation
// errors returned by DisableGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type DisableGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableGroupRequestMultiError) AllErrors() []error { return m }

// DisableGroupRequestValidationError is the validation error returned by
// DisableGroupRequest.Validate if the designated constraints aren't met.
type DisableGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableGroupRequestValidationError) ErrorName() string {
	return "DisableGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableGroupRequestValidationError{}

// Validate checks the field values on DisableGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableGroupResponseMultiError, or nil if none found.
func (m *DisableGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableGroupResponseMultiError(errors)
	}

	return nil
}

// DisableGroupResponseMultiError is an error wrapping multiple validation
// errors returned by DisableGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type DisableGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableGroupResponseMultiError) AllErrors() []error { return m }

// DisableGroupResponseValidationError is the validation error returned by
// DisableGroupResponse.Validate if the designated constraints aren't met.
type DisableGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableGroupResponseValidationError) ErrorName() string {
	return "DisableGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableGroupResponseValidationError{}

// Validate checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupRequestMultiError, or nil if none found.
func (m *DeleteGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := DeleteGroupRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteGroupRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupRequestMultiError) AllErrors() []error { return m }

// DeleteGroupRequestValidationError is the validation error returned by
// DeleteGroupRequest.Validate if the designated constraints aren't met.
type DeleteGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupRequestValidationError) ErrorName() string {
	return "DeleteGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupRequestValidationError{}

// Validate checks the field values on DeleteGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupResponseMultiError, or nil if none found.
func (m *DeleteGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGroupResponseMultiError(errors)
	}

	return nil
}

// DeleteGroupResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupResponseMultiError) AllErrors() []error { return m }

// DeleteGroupResponseValidationError is the validation error returned by
// DeleteGroupResponse.Validate if the designated constraints aren't met.
type DeleteGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupResponseValidationError) ErrorName() string {
	return "DeleteGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupResponseValidationError{}

// Validate checks the field values on AddGroupUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddGroupUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddGroupUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddGroupUsersRequestMultiError, or nil if none found.
func (m *AddGroupUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddGroupUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := AddGroupUsersRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddGroupUsersRequestMultiError(errors)
	}

	return nil
}

// AddGroupUsersRequestMultiError is an error wrapping multiple validation
// errors returned by AddGroupUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type AddGroupUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddGroupUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddGroupUsersRequestMultiError) AllErrors() []error { return m }

// AddGroupUsersRequestValidationError is the validation error returned by
// AddGroupUsersRequest.Validate if the designated constraints aren't met.
type AddGroupUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGroupUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGroupUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGroupUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGroupUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGroupUsersRequestValidationError) ErrorName() string {
	return "AddGroupUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddGroupUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGroupUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGroupUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGroupUsersRequestValidationError{}

// Validate checks the field values on AddGroupUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddGroupUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddGroupUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddGroupUsersResponseMultiError, or nil if none found.
func (m *AddGroupUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddGroupUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddGroupUsersResponseMultiError(errors)
	}

	return nil
}

// AddGroupUsersResponseMultiError is an error wrapping multiple validation
// errors returned by AddGroupUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type AddGroupUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddGroupUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddGroupUsersResponseMultiError) AllErrors() []error { return m }

// AddGroupUsersResponseValidationError is the validation error returned by
// AddGroupUsersResponse.Validate if the designated constraints aren't met.
type AddGroupUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGroupUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGroupUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGroupUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGroupUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGroupUsersResponseValidationError) ErrorName() string {
	return "AddGroupUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddGroupUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGroupUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGroupUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGroupUsersResponseValidationError{}

// Validate checks the field values on RemoveGroupUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveGroupUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveGroupUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveGroupUserRequestMultiError, or nil if none found.
func (m *RemoveGroupUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveGroupUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := RemoveGroupUserRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return RemoveGroupUserRequestMultiError(errors)
	}

	return nil
}

// RemoveGroupUserRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveGroupUserRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveGroupUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveGroupUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveGroupUserRequestMultiError) AllErrors() []error { return m }

// RemoveGroupUserRequestValidationError is the validation error returned by
// RemoveGroupUserRequest.Validate if the designated constraints aren't met.
type RemoveGroupUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveGroupUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveGroupUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveGroupUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveGroupUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveGroupUserRequestValidationError) ErrorName() string {
	return "RemoveGroupUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveGroupUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveGroupUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveGroupUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveGroupUserRequestValidationError{}

// Validate checks the field values on RemoveGroupUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveGroupUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveGroupUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveGroupUserResponseMultiError, or nil if none found.
func (m *RemoveGroupUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveGroupUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveGroupUserResponseMultiError(errors)
	}

	return nil
}

// RemoveGroupUserResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveGroupUserResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveGroupUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveGroupUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveGroupUserResponseMultiError) AllErrors() []error { return m }

// RemoveGroupUserResponseValidationError is the validation error returned by
// RemoveGroupUserResponse.Validate if the designated constraints aren't met.
type RemoveGroupUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveGroupUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveGroupUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveGroupUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveGroupUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveGroupUserResponseValidationError) ErrorName() string {
	return "RemoveGroupUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveGroupUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveGroupUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveGroupUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveGroupUserResponseValidationError{}

// Validate checks the field values on DeleteRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRelationRequestMultiError, or nil if none found.
func (m *DeleteRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Object

	// no validation rules for Subject

	// no validation rules for Relation

	if len(errors) > 0 {
		return DeleteRelationRequestMultiError(errors)
	}

	return nil
}

// DeleteRelationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRelationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRelationRequestMultiError) AllErrors() []error { return m }

// DeleteRelationRequestValidationError is the validation error returned by
// DeleteRelationRequest.Validate if the designated constraints aren't met.
type DeleteRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRelationRequestValidationError) ErrorName() string {
	return "DeleteRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRelationRequestValidationError{}

// Validate checks the field values on DeleteRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRelationResponseMultiError, or nil if none found.
func (m *DeleteRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRelationResponseMultiError(errors)
	}

	return nil
}

// DeleteRelationResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteRelationResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRelationResponseMultiError) AllErrors() []error { return m }

// DeleteRelationResponseValidationError is the validation error returned by
// DeleteRelationResponse.Validate if the designated constraints aren't met.
type DeleteRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRelationResponseValidationError) ErrorName() string {
	return "DeleteRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRelationResponseValidationError{}

// Validate checks the field values on ListProjectResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectResourcesRequestMultiError, or nil if none found.
func (m *ListProjectResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProjectId()) < 3 {
		err := ListProjectResourcesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	if len(errors) > 0 {
		return ListProjectResourcesRequestMultiError(errors)
	}

	return nil
}

// ListProjectResourcesRequestMultiError is an error wrapping multiple
// validation errors returned by ListProjectResourcesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListProjectResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectResourcesRequestMultiError) AllErrors() []error { return m }

// ListProjectResourcesRequestValidationError is the validation error returned
// by ListProjectResourcesRequest.Validate if the designated constraints
// aren't met.
type ListProjectResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectResourcesRequestValidationError) ErrorName() string {
	return "ListProjectResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectResourcesRequestValidationError{}

// Validate checks the field values on ListProjectResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectResourcesResponseMultiError, or nil if none found.
func (m *ListProjectResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectResourcesResponseValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectResourcesResponseMultiError(errors)
	}

	return nil
}

// ListProjectResourcesResponseMultiError is an error wrapping multiple
// validation errors returned by ListProjectResourcesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListProjectResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectResourcesResponseMultiError) AllErrors() []error { return m }

// ListProjectResourcesResponseValidationError is the validation error returned
// by ListProjectResourcesResponse.Validate if the designated constraints
// aren't met.
type ListProjectResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectResourcesResponseValidationError) ErrorName() string {
	return "ListProjectResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectResourcesResponseValidationError{}

// Validate checks the field values on ResourceRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceRequestBodyMultiError, or nil if none found.
func (m *ResourceRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ProjectId

	// no validation rules for Namespace

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceRequestBodyMultiError(errors)
	}

	return nil
}

// ResourceRequestBodyMultiError is an error wrapping multiple validation
// errors returned by ResourceRequestBody.ValidateAll() if the designated
// constraints aren't met.
type ResourceRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceRequestBodyMultiError) AllErrors() []error { return m }

// ResourceRequestBodyValidationError is the validation error returned by
// ResourceRequestBody.Validate if the designated constraints aren't met.
type ResourceRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceRequestBodyValidationError) ErrorName() string {
	return "ResourceRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceRequestBodyValidationError{}

// Validate checks the field values on CreateProjectResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectResourceRequestMultiError, or nil if none found.
func (m *CreateProjectResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectResourceRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectResourceRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectResourceRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProjectResourceRequestMultiError(errors)
	}

	return nil
}

// CreateProjectResourceRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProjectResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateProjectResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectResourceRequestMultiError) AllErrors() []error { return m }

// CreateProjectResourceRequestValidationError is the validation error returned
// by CreateProjectResourceRequest.Validate if the designated constraints
// aren't met.
type CreateProjectResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectResourceRequestValidationError) ErrorName() string {
	return "CreateProjectResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectResourceRequestValidationError{}

// Validate checks the field values on CreateProjectResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectResourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateProjectResourceResponseMultiError, or nil if none found.
func (m *CreateProjectResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProjectResourceResponseMultiError(errors)
	}

	return nil
}

// CreateProjectResourceResponseMultiError is an error wrapping multiple
// validation errors returned by CreateProjectResourceResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateProjectResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectResourceResponseMultiError) AllErrors() []error { return m }

// CreateProjectResourceResponseValidationError is the validation error
// returned by CreateProjectResourceResponse.Validate if the designated
// constraints aren't met.
type CreateProjectResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectResourceResponseValidationError) ErrorName() string {
	return "CreateProjectResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectResourceResponseValidationError{}

// Validate checks the field values on GetProjectResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectResourceRequestMultiError, or nil if none found.
func (m *GetProjectResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetProjectId()) < 3 {
		err := GetProjectResourceRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProjectResourceRequestMultiError(errors)
	}

	return nil
}

// GetProjectResourceRequestMultiError is an error wrapping multiple validation
// errors returned by GetProjectResourceRequest.ValidateAll() if the
// designated constraints aren't met.
type GetProjectResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectResourceRequestMultiError) AllErrors() []error { return m }

// GetProjectResourceRequestValidationError is the validation error returned by
// GetProjectResourceRequest.Validate if the designated constraints aren't met.
type GetProjectResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectResourceRequestValidationError) ErrorName() string {
	return "GetProjectResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectResourceRequestValidationError{}

// Validate checks the field values on GetProjectResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectResourceResponseMultiError, or nil if none found.
func (m *GetProjectResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProjectResourceResponseMultiError(errors)
	}

	return nil
}

// GetProjectResourceResponseMultiError is an error wrapping multiple
// validation errors returned by GetProjectResourceResponse.ValidateAll() if
// the designated constraints aren't met.
type GetProjectResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectResourceResponseMultiError) AllErrors() []error { return m }

// GetProjectResourceResponseValidationError is the validation error returned
// by GetProjectResourceResponse.Validate if the designated constraints aren't met.
type GetProjectResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectResourceResponseValidationError) ErrorName() string {
	return "GetProjectResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectResourceResponseValidationError{}

// Validate checks the field values on UpdateProjectResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectResourceRequestMultiError, or nil if none found.
func (m *UpdateProjectResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectResourceRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectResourceRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectResourceRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectResourceRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectResourceRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProjectResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectResourceRequestMultiError) AllErrors() []error { return m }

// UpdateProjectResourceRequestValidationError is the validation error returned
// by UpdateProjectResourceRequest.Validate if the designated constraints
// aren't met.
type UpdateProjectResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectResourceRequestValidationError) ErrorName() string {
	return "UpdateProjectResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectResourceRequestValidationError{}

// Validate checks the field values on UpdateProjectResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectResourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProjectResourceResponseMultiError, or nil if none found.
func (m *UpdateProjectResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectResourceResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectResourceResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectResourceResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateProjectResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectResourceResponseMultiError) AllErrors() []error { return m }

// UpdateProjectResourceResponseValidationError is the validation error
// returned by UpdateProjectResourceResponse.Validate if the designated
// constraints aren't met.
type UpdateProjectResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectResourceResponseValidationError) ErrorName() string {
	return "UpdateProjectResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectResourceResponseValidationError{}

// Validate checks the field values on DeleteProjectResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectResourceRequestMultiError, or nil if none found.
func (m *DeleteProjectResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetProjectId()) < 3 {
		err := DeleteProjectResourceRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProjectResourceRequestMultiError(errors)
	}

	return nil
}

// DeleteProjectResourceRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProjectResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteProjectResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectResourceRequestMultiError) AllErrors() []error { return m }

// DeleteProjectResourceRequestValidationError is the validation error returned
// by DeleteProjectResourceRequest.Validate if the designated constraints
// aren't met.
type DeleteProjectResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectResourceRequestValidationError) ErrorName() string {
	return "DeleteProjectResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectResourceRequestValidationError{}

// Validate checks the field values on DeleteProjectResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectResourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteProjectResourceResponseMultiError, or nil if none found.
func (m *DeleteProjectResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProjectResourceResponseMultiError(errors)
	}

	return nil
}

// DeleteProjectResourceResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteProjectResourceResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteProjectResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectResourceResponseMultiError) AllErrors() []error { return m }

// DeleteProjectResourceResponseValidationError is the validation error
// returned by DeleteProjectResourceResponse.Validate if the designated
// constraints aren't met.
type DeleteProjectResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectResourceResponseValidationError) ErrorName() string {
	return "DeleteProjectResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectResourceResponseValidationError{}

// Validate checks the field values on CheckResourcePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckResourcePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResourcePermissionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckResourcePermissionRequestMultiError, or nil if none found.
func (m *CheckResourcePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourcePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CheckResourcePermissionRequest_ObjectId_Pattern.MatchString(m.GetObjectId()) {
		err := CheckResourcePermissionRequestValidationError{
			field:  "ObjectId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CheckResourcePermissionRequest_ObjectNamespace_Pattern.MatchString(m.GetObjectNamespace()) {
		err := CheckResourcePermissionRequestValidationError{
			field:  "ObjectNamespace",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_/-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CheckResourcePermissionRequest_Permission_Pattern.MatchString(m.GetPermission()) {
		err := CheckResourcePermissionRequestValidationError{
			field:  "Permission",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckResourcePermissionRequestMultiError(errors)
	}

	return nil
}

// CheckResourcePermissionRequestMultiError is an error wrapping multiple
// validation errors returned by CheckResourcePermissionRequest.ValidateAll()
// if the designated constraints aren't met.
type CheckResourcePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourcePermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourcePermissionRequestMultiError) AllErrors() []error { return m }

// CheckResourcePermissionRequestValidationError is the validation error
// returned by CheckResourcePermissionRequest.Validate if the designated
// constraints aren't met.
type CheckResourcePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourcePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourcePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourcePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourcePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourcePermissionRequestValidationError) ErrorName() string {
	return "CheckResourcePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourcePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourcePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourcePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourcePermissionRequestValidationError{}

var _CheckResourcePermissionRequest_ObjectId_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _CheckResourcePermissionRequest_ObjectNamespace_Pattern = regexp.MustCompile("^[A-Za-z0-9_/-]+$")

var _CheckResourcePermissionRequest_Permission_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on CheckResourcePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckResourcePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResourcePermissionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckResourcePermissionResponseMultiError, or nil if none found.
func (m *CheckResourcePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourcePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CheckResourcePermissionResponseMultiError(errors)
	}

	return nil
}

// CheckResourcePermissionResponseMultiError is an error wrapping multiple
// validation errors returned by CheckResourcePermissionResponse.ValidateAll()
// if the designated constraints aren't met.
type CheckResourcePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourcePermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourcePermissionResponseMultiError) AllErrors() []error { return m }

// CheckResourcePermissionResponseValidationError is the validation error
// returned by CheckResourcePermissionResponse.Validate if the designated
// constraints aren't met.
type CheckResourcePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourcePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourcePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourcePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourcePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourcePermissionResponseValidationError) ErrorName() string {
	return "CheckResourcePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourcePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourcePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourcePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourcePermissionResponseValidationError{}

// Validate checks the field values on MetaSchemaRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetaSchemaRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetaSchemaRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetaSchemaRequestBodyMultiError, or nil if none found.
func (m *MetaSchemaRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *MetaSchemaRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_MetaSchemaRequestBody_Name_Pattern.MatchString(m.GetName()) {
		err := MetaSchemaRequestBodyValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSchema()) < 2 {
		err := MetaSchemaRequestBodyValidationError{
			field:  "Schema",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MetaSchemaRequestBodyMultiError(errors)
	}

	return nil
}

// MetaSchemaRequestBodyMultiError is an error wrapping multiple validation
// errors returned by MetaSchemaRequestBody.ValidateAll() if the designated
// constraints aren't met.
type MetaSchemaRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetaSchemaRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetaSchemaRequestBodyMultiError) AllErrors() []error { return m }

// MetaSchemaRequestBodyValidationError is the validation error returned by
// MetaSchemaRequestBody.Validate if the designated constraints aren't met.
type MetaSchemaRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaSchemaRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaSchemaRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaSchemaRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaSchemaRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaSchemaRequestBodyValidationError) ErrorName() string {
	return "MetaSchemaRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e MetaSchemaRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetaSchemaRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaSchemaRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaSchemaRequestBodyValidationError{}

var _MetaSchemaRequestBody_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]+$")

// Validate checks the field values on CreateMetaSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMetaSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMetaSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMetaSchemaRequestMultiError, or nil if none found.
func (m *CreateMetaSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMetaSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMetaSchemaRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMetaSchemaRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMetaSchemaRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMetaSchemaRequestMultiError(errors)
	}

	return nil
}

// CreateMetaSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMetaSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMetaSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMetaSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMetaSchemaRequestMultiError) AllErrors() []error { return m }

// CreateMetaSchemaRequestValidationError is the validation error returned by
// CreateMetaSchemaRequest.Validate if the designated constraints aren't met.
type CreateMetaSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetaSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetaSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetaSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetaSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetaSchemaRequestValidationError) ErrorName() string {
	return "CreateMetaSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMetaSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetaSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetaSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetaSchemaRequestValidationError{}

// Validate checks the field values on CreateMetaSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMetaSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMetaSchemaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMetaSchemaResponseMultiError, or nil if none found.
func (m *CreateMetaSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMetaSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetaschema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMetaSchemaResponseValidationError{
					field:  "Metaschema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMetaSchemaResponseValidationError{
					field:  "Metaschema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetaschema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMetaSchemaResponseValidationError{
				field:  "Metaschema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMetaSchemaResponseMultiError(errors)
	}

	return nil
}

// CreateMetaSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMetaSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMetaSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMetaSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMetaSchemaResponseMultiError) AllErrors() []error { return m }

// CreateMetaSchemaResponseValidationError is the validation error returned by
// CreateMetaSchemaResponse.Validate if the designated constraints aren't met.
type CreateMetaSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetaSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetaSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetaSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetaSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetaSchemaResponseValidationError) ErrorName() string {
	return "CreateMetaSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMetaSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetaSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetaSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetaSchemaResponseValidationError{}

// Validate checks the field values on GetMetaSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetaSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetaSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetaSchemaRequestMultiError, or nil if none found.
func (m *GetMetaSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetaSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMetaSchemaRequestMultiError(errors)
	}

	return nil
}

// GetMetaSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by GetMetaSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMetaSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetaSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetaSchemaRequestMultiError) AllErrors() []error { return m }

// GetMetaSchemaRequestValidationError is the validation error returned by
// GetMetaSchemaRequest.Validate if the designated constraints aren't met.
type GetMetaSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetaSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetaSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetaSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetaSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetaSchemaRequestValidationError) ErrorName() string {
	return "GetMetaSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetaSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetaSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetaSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetaSchemaRequestValidationError{}

// Validate checks the field values on GetMetaSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetaSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetaSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetaSchemaResponseMultiError, or nil if none found.
func (m *GetMetaSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetaSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetaschema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMetaSchemaResponseValidationError{
					field:  "Metaschema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMetaSchemaResponseValidationError{
					field:  "Metaschema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetaschema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetaSchemaResponseValidationError{
				field:  "Metaschema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMetaSchemaResponseMultiError(errors)
	}

	return nil
}

// GetMetaSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by GetMetaSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMetaSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetaSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetaSchemaResponseMultiError) AllErrors() []error { return m }

// GetMetaSchemaResponseValidationError is the validation error returned by
// GetMetaSchemaResponse.Validate if the designated constraints aren't met.
type GetMetaSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetaSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetaSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetaSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetaSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetaSchemaResponseValidationError) ErrorName() string {
	return "GetMetaSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetaSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetaSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetaSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetaSchemaResponseValidationError{}

// Validate checks the field values on UpdateMetaSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMetaSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMetaSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMetaSchemaRequestMultiError, or nil if none found.
func (m *UpdateMetaSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMetaSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetBody() == nil {
		err := UpdateMetaSchemaRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMetaSchemaRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMetaSchemaRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMetaSchemaRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMetaSchemaRequestMultiError(errors)
	}

	return nil
}

// UpdateMetaSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMetaSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMetaSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMetaSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMetaSchemaRequestMultiError) AllErrors() []error { return m }

// UpdateMetaSchemaRequestValidationError is the validation error returned by
// UpdateMetaSchemaRequest.Validate if the designated constraints aren't met.
type UpdateMetaSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMetaSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMetaSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMetaSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMetaSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMetaSchemaRequestValidationError) ErrorName() string {
	return "UpdateMetaSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMetaSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMetaSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMetaSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMetaSchemaRequestValidationError{}

// Validate checks the field values on UpdateMetaSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMetaSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMetaSchemaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMetaSchemaResponseMultiError, or nil if none found.
func (m *UpdateMetaSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMetaSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetaschema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMetaSchemaResponseValidationError{
					field:  "Metaschema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMetaSchemaResponseValidationError{
					field:  "Metaschema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetaschema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMetaSchemaResponseValidationError{
				field:  "Metaschema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMetaSchemaResponseMultiError(errors)
	}

	return nil
}

// UpdateMetaSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMetaSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateMetaSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMetaSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMetaSchemaResponseMultiError) AllErrors() []error { return m }

// UpdateMetaSchemaResponseValidationError is the validation error returned by
// UpdateMetaSchemaResponse.Validate if the designated constraints aren't met.
type UpdateMetaSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMetaSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMetaSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMetaSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMetaSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMetaSchemaResponseValidationError) ErrorName() string {
	return "UpdateMetaSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMetaSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMetaSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMetaSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMetaSchemaResponseValidationError{}

// Validate checks the field values on DeleteMetaSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMetaSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMetaSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMetaSchemaRequestMultiError, or nil if none found.
func (m *DeleteMetaSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMetaSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMetaSchemaRequestMultiError(errors)
	}

	return nil
}

// DeleteMetaSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMetaSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMetaSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMetaSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMetaSchemaRequestMultiError) AllErrors() []error { return m }

// DeleteMetaSchemaRequestValidationError is the validation error returned by
// DeleteMetaSchemaRequest.Validate if the designated constraints aren't met.
type DeleteMetaSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMetaSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMetaSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMetaSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMetaSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMetaSchemaRequestValidationError) ErrorName() string {
	return "DeleteMetaSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMetaSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMetaSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMetaSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMetaSchemaRequestValidationError{}

// Validate checks the field values on DeleteMetaSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMetaSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMetaSchemaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMetaSchemaResponseMultiError, or nil if none found.
func (m *DeleteMetaSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMetaSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMetaSchemaResponseMultiError(errors)
	}

	return nil
}

// DeleteMetaSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMetaSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMetaSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMetaSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMetaSchemaResponseMultiError) AllErrors() []error { return m }

// DeleteMetaSchemaResponseValidationError is the validation error returned by
// DeleteMetaSchemaResponse.Validate if the designated constraints aren't met.
type DeleteMetaSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMetaSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMetaSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMetaSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMetaSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMetaSchemaResponseValidationError) ErrorName() string {
	return "DeleteMetaSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMetaSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMetaSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMetaSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMetaSchemaResponseValidationError{}

// Validate checks the field values on ListMetaSchemasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMetaSchemasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMetaSchemasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMetaSchemasRequestMultiError, or nil if none found.
func (m *ListMetaSchemasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMetaSchemasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListMetaSchemasRequestMultiError(errors)
	}

	return nil
}

// ListMetaSchemasRequestMultiError is an error wrapping multiple validation
// errors returned by ListMetaSchemasRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMetaSchemasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMetaSchemasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMetaSchemasRequestMultiError) AllErrors() []error { return m }

// ListMetaSchemasRequestValidationError is the validation error returned by
// ListMetaSchemasRequest.Validate if the designated constraints aren't met.
type ListMetaSchemasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetaSchemasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetaSchemasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetaSchemasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetaSchemasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetaSchemasRequestValidationError) ErrorName() string {
	return "ListMetaSchemasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetaSchemasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetaSchemasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetaSchemasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetaSchemasRequestValidationError{}

// Validate checks the field values on ListMetaSchemasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMetaSchemasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMetaSchemasResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMetaSchemasResponseMultiError, or nil if none found.
func (m *ListMetaSchemasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMetaSchemasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMetaschemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMetaSchemasResponseValidationError{
						field:  fmt.Sprintf("Metaschemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMetaSchemasResponseValidationError{
						field:  fmt.Sprintf("Metaschemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMetaSchemasResponseValidationError{
					field:  fmt.Sprintf("Metaschemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMetaSchemasResponseMultiError(errors)
	}

	return nil
}

// ListMetaSchemasResponseMultiError is an error wrapping multiple validation
// errors returned by ListMetaSchemasResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMetaSchemasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMetaSchemasResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMetaSchemasResponseMultiError) AllErrors() []error { return m }

// ListMetaSchemasResponseValidationError is the validation error returned by
// ListMetaSchemasResponse.Validate if the designated constraints aren't met.
type ListMetaSchemasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetaSchemasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetaSchemasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetaSchemasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetaSchemasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetaSchemasResponseValidationError) ErrorName() string {
	return "ListMetaSchemasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetaSchemasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetaSchemasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetaSchemasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetaSchemasResponseValidationError{}
