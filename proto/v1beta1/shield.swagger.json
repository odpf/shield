{
  "swagger": "2.0",
  "info": {
    "title": "Shield General APIs",
    "version": "0.2.0"
  },
  "tags": [
    {
      "name": "ShieldService"
    },
    {
      "name": "User"
    },
    {
      "name": "Group",
      "description": "Groups in Shield are used to manage users and their access to resources. Each group has a unique name and id that can be used to grant access to resources. When a user is added to a group, they inherit the access permissions that have been granted to the group. This allows you to manage access to resources at scale, without having to grant permissions to individual users."
    },
    {
      "name": "Role"
    },
    {
      "name": "Organization"
    },
    {
      "name": "Project"
    },
    {
      "name": "Policy"
    },
    {
      "name": "Relation"
    },
    {
      "name": "Permission"
    },
    {
      "name": "Namespace"
    },
    {
      "name": "Resource"
    },
    {
      "name": "Authz",
      "description": "Authorization APIs"
    },
    {
      "name": "Authn",
      "description": "Authentication APIs"
    },
    {
      "name": "MetaSchema",
      "description": "Manage Metadata Schemas which are used to validate metadata object while creating user/org/group/role. Shield automatically generates default metaschemas with `label` and `description` fields. You can also update these metaschemas to add/edit more fields."
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1beta1/auth": {
      "get": {
        "summary": "Get all authentication strategies",
        "description": "Returns a list of identity providers configured on an instance level in Shield. e.g Google, AzureAD, Github etc",
        "operationId": "ShieldService_ListAuthStrategies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListAuthStrategiesResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Authn"
        ]
      }
    },
    "/v1beta1/auth/callback": {
      "get": {
        "summary": "Callback from a strategy",
        "description": "Callback from a strategy. This is the endpoint where the strategy will redirect the user after successful authentication. This endpoint will be called with the code and state query parameters. The code will be used to get the access token from the strategy and the state will be used to get the return_to url from the session and redirect the user to that url.",
        "operationId": "ShieldService_AuthCallback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1AuthCallbackResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "strategyName",
            "description": "strategy_name will not be set for oidc but can be utilized for methods like email magic links",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "for oidc \u0026 magic links",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authn"
        ]
      },
      "post": {
        "summary": "Callback from a strategy",
        "description": "Callback from a strategy. This is the endpoint where the strategy will redirect the user after successful authentication. This endpoint will be called with the code and state query parameters. The code will be used to get the access token from the strategy and the state will be used to get the return_to url from the session and redirect the user to that url.",
        "operationId": "ShieldService_AuthCallback2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1AuthCallbackResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "strategyName",
            "description": "strategy_name will not be set for oidc but can be utilized for methods like email magic links",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "for oidc \u0026 magic links",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authn"
        ]
      }
    },
    "/v1beta1/auth/logout": {
      "get": {
        "summary": "Logout from a strategy",
        "operationId": "ShieldService_AuthLogout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1AuthLogoutResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Authn"
        ]
      },
      "delete": {
        "summary": "Logout from a strategy",
        "operationId": "ShieldService_AuthLogout2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1AuthLogoutResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Authn"
        ]
      }
    },
    "/v1beta1/auth/register/{strategyName}": {
      "get": {
        "summary": "Authenticate with a strategy",
        "description": "Authenticate a user with a strategy. By default, after successful authentication no operation will be performed to apply redirection in case of browsers, provide a url in the authenticate request body that will be used for redirection after authentication. Also set redirect as true for redirecting the user request to the redirect_url after successful authentication.",
        "operationId": "ShieldService_Authenticate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1AuthenticateResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "strategyName",
            "description": "Name of the strategy to use for authentication.\u003cbr/\u003e *Example:* `google`",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "redirect",
            "description": "by default, location header for redirect if applicable\nwill be skipped unless this is set to true, useful in browser\n\nIf set to true, location header will be set for redirect",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "returnTo",
            "description": "by default, after successful authentication no operation will be performed\nto apply redirection in case of browsers, provide a url that will be used\nfor redirection after authentication\n\nURL to redirect after successful authentication.\u003cbr/\u003e *Example:*`\"https://shield.example.com\"`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "description": "email of the user for magic links\n\nEmail of the user to authenticate. Used for magic links.\u003cbr/\u003e *Example:*`example@acme.org`",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authn"
        ]
      },
      "post": {
        "summary": "Authenticate with a strategy",
        "description": "Authenticate a user with a strategy. By default, after successful authentication no operation will be performed to apply redirection in case of browsers, provide a url in the authenticate request body that will be used for redirection after authentication. Also set redirect as true for redirecting the user request to the redirect_url after successful authentication.",
        "operationId": "ShieldService_Authenticate2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1AuthenticateResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "strategyName",
            "description": "Name of the strategy to use for authentication.\u003cbr/\u003e *Example:* `google`",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "redirect",
            "description": "by default, location header for redirect if applicable\nwill be skipped unless this is set to true, useful in browser\n\nIf set to true, location header will be set for redirect",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "returnTo",
            "description": "by default, after successful authentication no operation will be performed\nto apply redirection in case of browsers, provide a url that will be used\nfor redirection after authentication\n\nURL to redirect after successful authentication.\u003cbr/\u003e *Example:*`\"https://shield.example.com\"`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "description": "email of the user for magic links\n\nEmail of the user to authenticate. Used for magic links.\u003cbr/\u003e *Example:*`example@acme.org`",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authn"
        ]
      }
    },
    "/v1beta1/check": {
      "post": {
        "summary": "check permission on a resource of an user",
        "operationId": "ShieldService_CheckResourcePermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1CheckResourcePermissionResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1CheckResourcePermissionRequest"
            }
          }
        ],
        "tags": [
          "Authz"
        ]
      }
    },
    "/v1beta1/meta/schemas": {
      "get": {
        "summary": "Get all Metadata Schemas",
        "description": "Returns a list of all metaschemas configured on an instance level in Shield. e.g user, project, organization etc",
        "operationId": "ShieldService_ListMetaSchemas",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListMetaSchemasResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "MetaSchema"
        ]
      },
      "post": {
        "summary": "Create Metadata Schema",
        "description": "Create a new metadata schema. The metaschema **name** must be unique within the entire Shield instance and can contain only alphanumeric characters, dashes and underscores. The metaschema **schema** must be a valid JSON schema.Please refer to https://json-schema.org/ to know more about json schema. \u003cbr/\u003e*Example:* `{name:\"user\",schema:{\"type\":\"object\",\"properties\":{\"label\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}},\"description\":{\"type\":\"string\"}}}}`",
        "operationId": "ShieldService_CreateMetaSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1CreateMetaSchemaResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1MetaSchemaRequestBody"
            }
          }
        ],
        "tags": [
          "MetaSchema"
        ]
      }
    },
    "/v1beta1/meta/schemas/{id}": {
      "get": {
        "summary": "Get MetaSchema by ID",
        "description": "Get a metadata schema by ID.",
        "operationId": "ShieldService_GetMetaSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetMetaSchemaResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaSchema"
        ]
      },
      "delete": {
        "summary": "Delete a MetaSchema permanently",
        "description": "Delete a metadata schema permanently. Once deleted the metaschema won't be used to validate the metadata. For example, if a metaschema(with `label` and `description` fields) is used to validate the metadata of a user, then deleting the metaschema will not validate the metadata of the user and metadata field can contain any key-value pair(and say another field called `foo` can be inserted in a user's metadata).",
        "operationId": "ShieldService_DeleteMetaSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DeleteMetaSchemaResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaSchema"
        ]
      },
      "put": {
        "summary": "Update MetaSchema by ID",
        "description": "Update a metadata schema. Only `schema` field of a metaschema can be updated. The metaschema `schema` must be a valid JSON schema.Please refer to https://json-schema.org/ to know more about json schema. \u003cbr/\u003e*Example:* `{name:\"user\",schema:{\"type\":\"object\",\"properties\":{\"label\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}},\"description\":{\"type\":\"string\"}}}}`",
        "operationId": "ShieldService_UpdateMetaSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1UpdateMetaSchemaResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1MetaSchemaRequestBody"
            }
          }
        ],
        "tags": [
          "MetaSchema"
        ]
      }
    },
    "/v1beta1/namespaces": {
      "get": {
        "summary": "Get all Namespaces",
        "operationId": "ShieldService_ListNamespaces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListNamespacesResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Namespace"
        ]
      }
    },
    "/v1beta1/namespaces/{id}": {
      "get": {
        "summary": "Get a Namespaces",
        "operationId": "ShieldService_GetNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetNamespaceResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Namespace"
        ]
      }
    },
    "/v1beta1/organizations": {
      "get": {
        "summary": "Get all organization",
        "operationId": "ShieldService_ListOrganizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListOrganizationsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "post": {
        "summary": "Create organization",
        "operationId": "ShieldService_CreateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1CreateOrganizationResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1OrganizationRequestBody"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1beta1/organizations/{id}": {
      "get": {
        "summary": "Get organization by ID or slug",
        "operationId": "ShieldService_GetOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetOrganizationResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "delete": {
        "summary": "Delete an organization permanently forever and all of its relations",
        "operationId": "ShieldService_DeleteOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DeleteOrganizationResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "put": {
        "summary": "Update organization by ID",
        "operationId": "ShieldService_UpdateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1UpdateOrganizationResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1OrganizationRequestBody"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1beta1/organizations/{id}/admins": {
      "get": {
        "summary": "Get all admins of an organization",
        "operationId": "ShieldService_ListOrganizationAdmins",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListOrganizationAdminsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1beta1/organizations/{id}/disable": {
      "post": {
        "summary": "Disable an organization",
        "operationId": "ShieldService_DisableOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DisableOrganizationResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1beta1/organizations/{id}/enable": {
      "post": {
        "summary": "Enable an Organization",
        "operationId": "ShieldService_EnableOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1EnableOrganizationResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1beta1/organizations/{id}/projects": {
      "get": {
        "summary": "Get all projects that belong to an organization",
        "operationId": "ShieldService_ListOrganizationProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListOrganizationProjectsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1beta1/organizations/{id}/users": {
      "get": {
        "summary": "List organization users",
        "operationId": "ShieldService_ListOrganizationUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListOrganizationUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "permissionFilter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "post": {
        "summary": "Add a user to an organization, request fails if the user doesn't exists",
        "operationId": "ShieldService_AddOrganizationUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1AddOrganizationUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1beta1/organizations/{id}/users/{userId}": {
      "delete": {
        "summary": "Remove a user to an organization",
        "operationId": "ShieldService_RemoveOrganizationUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1RemoveOrganizationUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1beta1/organizations/{orgId}/groups": {
      "get": {
        "summary": "List Organization Groups",
        "description": "Get all groups that belong to an organization. It can be filtered by keyword, organization, group and state. Additionally you can include page number and page size for pagination.",
        "operationId": "ShieldService_ListOrganizationGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListOrganizationGroupsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "The state to filter by. It can be enabled or disabled.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ]
      },
      "post": {
        "summary": "Create Group",
        "description": "Create a new group in an organization which serves as a container for users. The group can be assigned roles and permissions and can be used to manage access to resources. Also a group can also be assigned to other groups.",
        "operationId": "ShieldService_CreateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1CreateGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "description": "The organization ID to which the group belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1GroupRequestBody"
            }
          }
        ],
        "tags": [
          "Group"
        ]
      }
    },
    "/v1beta1/organizations/{orgId}/groups/{id}": {
      "get": {
        "summary": "Get group by ID",
        "operationId": "ShieldService_GetGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ]
      },
      "delete": {
        "summary": "Delete a group permanently and all of its relations",
        "operationId": "ShieldService_DeleteGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DeleteGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ]
      },
      "put": {
        "summary": "Update group by ID",
        "operationId": "ShieldService_UpdateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1UpdateGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "description": "The organization ID to which the group belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1GroupRequestBody"
            }
          }
        ],
        "tags": [
          "Group"
        ]
      }
    },
    "/v1beta1/organizations/{orgId}/groups/{id}/disable": {
      "post": {
        "summary": "Disable a group",
        "description": "Sets the state of the group as disabled. The group will not be available for access control and the existing users in the group will not be able to access any resources that are assigned to the group. No other users can be added to the group while it is disabled.",
        "operationId": "ShieldService_DisableGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DisableGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Group"
        ]
      }
    },
    "/v1beta1/organizations/{orgId}/groups/{id}/enable": {
      "post": {
        "summary": "Enable a Group",
        "description": "Sets the state of the group as enabled. The `enabled` flag is used to determine if the group can be used for access control.",
        "operationId": "ShieldService_EnableGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1EnableGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Group"
        ]
      }
    },
    "/v1beta1/organizations/{orgId}/groups/{id}/users": {
      "get": {
        "summary": "Get all users for a group",
        "operationId": "ShieldService_ListGroupUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListGroupUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ]
      },
      "post": {
        "summary": "Add users to a group, existing users will be ignored",
        "operationId": "ShieldService_AddGroupUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1AddGroupUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Group"
        ]
      }
    },
    "/v1beta1/organizations/{orgId}/groups/{id}/users/{userId}": {
      "delete": {
        "summary": "Remove user from a group",
        "operationId": "ShieldService_RemoveGroupUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1RemoveGroupUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ]
      }
    },
    "/v1beta1/organizations/{orgId}/invitations": {
      "get": {
        "summary": "List pending invitations queued for an organization",
        "operationId": "ShieldService_ListOrganizationInvitations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListOrganizationInvitationsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "post": {
        "summary": "Invite users to an organization, if the user doesn't exists, it will be created and notified. Invitations expire in 7 days",
        "operationId": "ShieldService_CreateOrganizationInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1CreateOrganizationInvitationResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "title": "user_id is email id of user who are invited inside the organization\nif user is not registered on the platform, it will be notified"
                },
                "groupIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "group_ids are optional, if present users will be assinged part of it"
                }
              }
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1beta1/organizations/{orgId}/invitations/{id}": {
      "get": {
        "summary": "Get pending invitation queued for an organization",
        "operationId": "ShieldService_GetOrganizationInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetOrganizationInvitationResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "delete": {
        "summary": "Delete pending invitation queued for an organization",
        "operationId": "ShieldService_DeleteOrganizationInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DeleteOrganizationInvitationResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1beta1/organizations/{orgId}/invitations/{id}/accept": {
      "post": {
        "summary": "Accept pending invitation queued for an organization",
        "operationId": "ShieldService_AcceptOrganizationInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1AcceptOrganizationInvitationResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1beta1/organizations/{orgId}/roles": {
      "get": {
        "summary": "Get custom roles under an org",
        "operationId": "ShieldService_ListOrganizationRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListOrganizationRolesResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Role"
        ]
      },
      "post": {
        "summary": "Create Role",
        "operationId": "ShieldService_CreateOrganizationRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1CreateOrganizationRoleResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "description": "The organization ID to which the role belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1RoleRequestBody"
            }
          }
        ],
        "tags": [
          "Role"
        ]
      }
    },
    "/v1beta1/organizations/{orgId}/roles/{id}": {
      "get": {
        "summary": "Get Role by ID",
        "operationId": "ShieldService_GetOrganizationRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetOrganizationRoleResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Role"
        ]
      },
      "delete": {
        "summary": "Delete a role permanently forever and all of its relations",
        "operationId": "ShieldService_DeleteOrganizationRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DeleteOrganizationRoleResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Role"
        ]
      },
      "put": {
        "summary": "Update Role by ID",
        "operationId": "ShieldService_UpdateOrganizationRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1UpdateOrganizationRoleResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1RoleRequestBody"
            }
          }
        ],
        "tags": [
          "Role"
        ]
      }
    },
    "/v1beta1/permissions": {
      "get": {
        "summary": "Get all Permissions",
        "operationId": "ShieldService_ListPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListPermissionsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Permission"
        ]
      }
    },
    "/v1beta1/permissions/{id}": {
      "get": {
        "summary": "Get permission by ID",
        "operationId": "ShieldService_GetPermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetPermissionResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Permission"
        ]
      }
    },
    "/v1beta1/policies": {
      "post": {
        "summary": "Create policy",
        "operationId": "ShieldService_CreatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1CreatePolicyResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1PolicyRequestBody"
            }
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/v1beta1/policies/{id}": {
      "get": {
        "summary": "Get policy by ID",
        "operationId": "ShieldService_GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetPolicyResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "delete": {
        "summary": "Delete a policy permanently forever and all of its relations",
        "operationId": "ShieldService_DeletePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DeletePolicyResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "put": {
        "summary": "Update policy by ID",
        "operationId": "ShieldService_UpdatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1UpdatePolicyResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1PolicyRequestBody"
            }
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/v1beta1/projects": {
      "post": {
        "summary": "Create oroject",
        "operationId": "ShieldService_CreateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1CreateProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1ProjectRequestBody"
            }
          }
        ],
        "tags": [
          "Project"
        ]
      }
    },
    "/v1beta1/projects/{id}": {
      "get": {
        "summary": "Get oroject by ID",
        "operationId": "ShieldService_GetProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Project"
        ]
      },
      "delete": {
        "summary": "Delete a oroject permanently forever and all of its relations",
        "operationId": "ShieldService_DeleteProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DeleteProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Project"
        ]
      },
      "put": {
        "summary": "Update oroject by ID",
        "operationId": "ShieldService_UpdateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1UpdateProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1ProjectRequestBody"
            }
          }
        ],
        "tags": [
          "Project"
        ]
      }
    },
    "/v1beta1/projects/{id}/admins": {
      "get": {
        "summary": "Get all Admins of a oroject",
        "operationId": "ShieldService_ListProjectAdmins",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListProjectAdminsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Project"
        ]
      }
    },
    "/v1beta1/projects/{id}/disable": {
      "post": {
        "summary": "Disable a oroject",
        "operationId": "ShieldService_DisableProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DisableProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Project"
        ]
      }
    },
    "/v1beta1/projects/{id}/enable": {
      "post": {
        "summary": "Enable a oroject",
        "operationId": "ShieldService_EnableProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1EnableProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Project"
        ]
      }
    },
    "/v1beta1/projects/{id}/users": {
      "get": {
        "summary": "Get all users of a oroject",
        "operationId": "ShieldService_ListProjectUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListProjectUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "permissionFilter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project"
        ]
      }
    },
    "/v1beta1/projects/{projectId}/resources": {
      "get": {
        "summary": "Get all resources",
        "operationId": "ShieldService_ListProjectResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListProjectResourcesResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Resource"
        ]
      },
      "post": {
        "summary": "Create Resource",
        "operationId": "ShieldService_CreateProjectResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1CreateProjectResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1ResourceRequestBody"
            }
          }
        ],
        "tags": [
          "Resource"
        ]
      }
    },
    "/v1beta1/projects/{projectId}/resources/{id}": {
      "get": {
        "summary": "Get Resource by ID",
        "operationId": "ShieldService_GetProjectResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetProjectResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Resource"
        ]
      },
      "delete": {
        "summary": "Delete a resource permanently forever",
        "operationId": "ShieldService_DeleteProjectResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DeleteProjectResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Resource"
        ]
      },
      "put": {
        "summary": "Update Resource by ID",
        "operationId": "ShieldService_UpdateProjectResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1UpdateProjectResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1ResourceRequestBody"
            }
          }
        ],
        "tags": [
          "Resource"
        ]
      }
    },
    "/v1beta1/relations": {
      "post": {
        "summary": "Create Relation",
        "operationId": "ShieldService_CreateRelation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1CreateRelationResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1RelationRequestBody"
            }
          }
        ],
        "tags": [
          "Relation"
        ]
      }
    },
    "/v1beta1/relations/{id}": {
      "get": {
        "summary": "Get Relation by ID",
        "operationId": "ShieldService_GetRelation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetRelationResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Relation"
        ]
      }
    },
    "/v1beta1/relations/{relation}/object/{object}/subject/{subject}": {
      "delete": {
        "summary": "Remove a subject having a relation from an object",
        "operationId": "ShieldService_DeleteRelation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DeleteRelationResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "object",
            "description": "objectnamespace:uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "subject",
            "description": "subjectnamespace:uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Relation"
        ]
      }
    },
    "/v1beta1/roles": {
      "get": {
        "summary": "List all pre-defined roles",
        "description": "Returns a collection of Shield predefined roles with their associated permissions",
        "operationId": "ShieldService_ListRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListRolesResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Role"
        ]
      }
    },
    "/v1beta1/users": {
      "get": {
        "summary": "Get all public users",
        "description": "Returns the users from all the organizations in a Shield instance. It can be filtered by keyword, organization, group and state. Additionally you can include page number and page size for pagination.",
        "operationId": "ShieldService_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "The maximum number of users to return per page. The default is 50.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNum",
            "description": "The page number to return. The default is 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "keyword",
            "description": "The keyword to search for in name or email.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgId",
            "description": "The organization ID to filter users by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupId",
            "description": "The group id to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "The state to filter by. It can be enabled or disabled.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      },
      "post": {
        "summary": "Create user",
        "description": "Create a user with the given details. A user is not attached to an organization or a group by default,and can be invited to the org/group. The name of the user must be unique within the entire Shield instance. If a user name is not provided, Shield automatically generates a name from the user email. The user metadata is validated against the user metaschema. By default the user metaschema contains `labels` and `descriptions` for the user. The `title` field can be optionally added for a user-friendly name. \u003cbr/\u003e\u003cbr/\u003e*Example:*`{\"email\":\"john.doe@odpf.io\",\"title\":\"John Doe\",metadata:{\"label\": {\"key1\": \"value1\"}, \"description\": \"User Description\"}}`",
        "operationId": "ShieldService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1CreateUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1UserRequestBody"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/v1beta1/users/self": {
      "get": {
        "summary": "Get current user",
        "operationId": "ShieldService_GetCurrentUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetCurrentUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User"
        ]
      },
      "put": {
        "summary": "Update current User",
        "operationId": "ShieldService_UpdateCurrentUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1UpdateCurrentUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1UserRequestBody"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/v1beta1/users/self/groups": {
      "get": {
        "summary": "List groups of a User",
        "operationId": "ShieldService_ListCurrentUserGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListCurrentUserGroupsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1beta1/users/self/organizations": {
      "get": {
        "summary": "Get My Organizations",
        "description": "Get all organizations the current user belongs to",
        "operationId": "ShieldService_GetOrganizationsByCurrentUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetOrganizationsByCurrentUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1beta1/users/{id}": {
      "get": {
        "summary": "Get a user by id",
        "description": "Get a user by id searched over all organizations in Shield.",
        "operationId": "ShieldService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      },
      "delete": {
        "summary": "Delete user",
        "description": "Delete an user permanently forever and all of its relations (organizations, groups, etc)",
        "operationId": "ShieldService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DeleteUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      },
      "put": {
        "summary": "Update User by ID",
        "operationId": "ShieldService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1UpdateUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1UserRequestBody"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/v1beta1/users/{id}/disable": {
      "post": {
        "summary": "Disable user",
        "description": "Sets the state of the user as diabled.The user's membership to groups and organizations will still exist along with all it's roles for access control, but the user will not be able to log in and access the Shield instance.",
        "operationId": "ShieldService_DisableUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DisableUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/v1beta1/users/{id}/enable": {
      "post": {
        "summary": "Enable user",
        "description": "Sets the state of the user as enabled. The user will be able to log in and access the Shield instance.",
        "operationId": "ShieldService_EnableUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1EnableUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/v1beta1/users/{id}/groups": {
      "get": {
        "summary": "List Groups of a User",
        "description": "Lists all the groups a user belongs to across all organization in Shield.",
        "operationId": "ShieldService_ListUserGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListUserGroupsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/v1beta1/users/{id}/organizations": {
      "get": {
        "summary": "Get Organizations by User",
        "description": "Get all the organizations a user belongs to.",
        "operationId": "ShieldService_GetOrganizationsByUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetOrganizationsByUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1beta1AcceptOrganizationInvitationResponse": {
      "type": "object"
    },
    "v1beta1AddGroupUsersResponse": {
      "type": "object"
    },
    "v1beta1AddOrganizationUsersResponse": {
      "type": "object"
    },
    "v1beta1AuthCallbackResponse": {
      "type": "object"
    },
    "v1beta1AuthLogoutResponse": {
      "type": "object"
    },
    "v1beta1AuthStrategy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "params": {
          "type": "object"
        }
      }
    },
    "v1beta1AuthenticateResponse": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1beta1CheckResourcePermissionRequest": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string"
        },
        "objectNamespace": {
          "type": "string"
        },
        "permission": {
          "type": "string"
        }
      },
      "required": [
        "objectId",
        "objectNamespace",
        "permission"
      ]
    },
    "v1beta1CheckResourcePermissionResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean"
        }
      }
    },
    "v1beta1CreateGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1beta1Group"
        }
      }
    },
    "v1beta1CreateMetaSchemaResponse": {
      "type": "object",
      "properties": {
        "metaschema": {
          "$ref": "#/definitions/v1beta1MetaSchema"
        }
      }
    },
    "v1beta1CreateOrganizationInvitationResponse": {
      "type": "object",
      "properties": {
        "invitation": {
          "$ref": "#/definitions/v1beta1Invitation"
        }
      }
    },
    "v1beta1CreateOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/v1beta1Organization"
        }
      }
    },
    "v1beta1CreateOrganizationRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/v1beta1Role"
        }
      }
    },
    "v1beta1CreatePolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1beta1Policy"
        }
      }
    },
    "v1beta1CreateProjectResourceResponse": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/v1beta1Resource"
        }
      }
    },
    "v1beta1CreateProjectResponse": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/v1beta1Project"
        }
      }
    },
    "v1beta1CreateRelationResponse": {
      "type": "object",
      "properties": {
        "relation": {
          "$ref": "#/definitions/v1beta1Relation"
        }
      }
    },
    "v1beta1CreateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1beta1User"
        }
      }
    },
    "v1beta1DeleteGroupResponse": {
      "type": "object"
    },
    "v1beta1DeleteMetaSchemaResponse": {
      "type": "object"
    },
    "v1beta1DeleteOrganizationInvitationResponse": {
      "type": "object"
    },
    "v1beta1DeleteOrganizationResponse": {
      "type": "object"
    },
    "v1beta1DeleteOrganizationRoleResponse": {
      "type": "object"
    },
    "v1beta1DeletePolicyResponse": {
      "type": "object"
    },
    "v1beta1DeleteProjectResourceResponse": {
      "type": "object"
    },
    "v1beta1DeleteProjectResponse": {
      "type": "object"
    },
    "v1beta1DeleteRelationResponse": {
      "type": "object"
    },
    "v1beta1DeleteUserResponse": {
      "type": "object"
    },
    "v1beta1DisableGroupResponse": {
      "type": "object"
    },
    "v1beta1DisableOrganizationResponse": {
      "type": "object"
    },
    "v1beta1DisableProjectResponse": {
      "type": "object"
    },
    "v1beta1DisableUserResponse": {
      "type": "object"
    },
    "v1beta1EnableGroupResponse": {
      "type": "object"
    },
    "v1beta1EnableOrganizationResponse": {
      "type": "object"
    },
    "v1beta1EnableProjectResponse": {
      "type": "object"
    },
    "v1beta1EnableUserResponse": {
      "type": "object"
    },
    "v1beta1GetCurrentUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1beta1User"
        }
      }
    },
    "v1beta1GetGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1beta1Group"
        }
      }
    },
    "v1beta1GetMetaSchemaResponse": {
      "type": "object",
      "properties": {
        "metaschema": {
          "$ref": "#/definitions/v1beta1MetaSchema"
        }
      }
    },
    "v1beta1GetNamespaceResponse": {
      "type": "object",
      "properties": {
        "namespace": {
          "$ref": "#/definitions/v1beta1Namespace"
        }
      }
    },
    "v1beta1GetOrganizationInvitationResponse": {
      "type": "object",
      "properties": {
        "invitation": {
          "$ref": "#/definitions/v1beta1Invitation"
        }
      }
    },
    "v1beta1GetOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/v1beta1Organization"
        }
      }
    },
    "v1beta1GetOrganizationRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/v1beta1Role"
        }
      }
    },
    "v1beta1GetOrganizationsByCurrentUserResponse": {
      "type": "object",
      "properties": {
        "organizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Organization"
          }
        }
      }
    },
    "v1beta1GetOrganizationsByUserResponse": {
      "type": "object",
      "properties": {
        "organizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Organization"
          }
        }
      }
    },
    "v1beta1GetPermissionResponse": {
      "type": "object",
      "properties": {
        "permission": {
          "$ref": "#/definitions/v1beta1Permission"
        }
      }
    },
    "v1beta1GetPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1beta1Policy"
        }
      }
    },
    "v1beta1GetProjectResourceResponse": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/v1beta1Resource"
        }
      }
    },
    "v1beta1GetProjectResponse": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/v1beta1Project"
        }
      }
    },
    "v1beta1GetRelationResponse": {
      "type": "object",
      "properties": {
        "relation": {
          "$ref": "#/definitions/v1beta1Relation"
        }
      }
    },
    "v1beta1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1beta1User"
        }
      }
    },
    "v1beta1Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "orgId": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1beta1GroupRequestBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the group. The name must be unique within the entire Shield instance. The name can contain only alphanumeric characters, dashes and underscores."
        },
        "title": {
          "type": "string",
          "description": "The title can contain any UTF-8 character, used to provide a human-readable name for the group. Can also be left empty."
        },
        "metadata": {
          "type": "object",
          "description": "Metadata object for groups that can hold key value pairs defined in Group Metaschema. The metadata object can be used to store arbitrary information about the group such as labels, descriptions etc. The default Group Metaschema contains labels and descripton fields. Update the Group Metaschema to add more fields.\u003cbr/\u003e*Example:*`{\"labels\": {\"key\": \"value\"}, \"description\": \"Group description\"}`"
        },
        "orgId": {
          "type": "string",
          "description": "The organization ID to which the group belongs to."
        }
      },
      "required": [
        "name"
      ]
    },
    "v1beta1Invitation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "orgId": {
          "type": "string"
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1beta1ListAuthStrategiesResponse": {
      "type": "object",
      "properties": {
        "strategies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1AuthStrategy"
          }
        }
      }
    },
    "v1beta1ListCurrentUserGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Group"
          }
        }
      }
    },
    "v1beta1ListGroupUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1User"
          }
        }
      }
    },
    "v1beta1ListMetaSchemasResponse": {
      "type": "object",
      "properties": {
        "metaschemas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1MetaSchema"
          }
        }
      }
    },
    "v1beta1ListNamespacesResponse": {
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Namespace"
          }
        }
      }
    },
    "v1beta1ListOrganizationAdminsResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1User"
          }
        }
      }
    },
    "v1beta1ListOrganizationGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Group"
          }
        }
      }
    },
    "v1beta1ListOrganizationInvitationsResponse": {
      "type": "object",
      "properties": {
        "invitations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Invitation"
          }
        }
      }
    },
    "v1beta1ListOrganizationProjectsResponse": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Project"
          }
        }
      }
    },
    "v1beta1ListOrganizationRolesResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Role"
          }
        }
      }
    },
    "v1beta1ListOrganizationUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1User"
          }
        }
      }
    },
    "v1beta1ListOrganizationsResponse": {
      "type": "object",
      "properties": {
        "organizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Organization"
          }
        }
      }
    },
    "v1beta1ListPermissionsResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Permission"
          }
        }
      }
    },
    "v1beta1ListProjectAdminsResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1User"
          }
        }
      }
    },
    "v1beta1ListProjectResourcesResponse": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Resource"
          }
        }
      }
    },
    "v1beta1ListProjectUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1User"
          }
        }
      }
    },
    "v1beta1ListRolesResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Role"
          }
        }
      }
    },
    "v1beta1ListUserGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Group"
          }
        }
      }
    },
    "v1beta1ListUsersResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1User"
          }
        }
      }
    },
    "v1beta1MetaSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1beta1MetaSchemaRequestBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the metaschema. The name must be unique within the entire Shield instance. The name can contain only alphanumeric characters, dashes and underscores."
        },
        "schema": {
          "type": "string",
          "description": "The schema of the metaschema. The schema must be a valid JSON schema.Please refer to https://json-schema.org/ to know more about json schema."
        }
      },
      "required": [
        "name",
        "schema"
      ]
    },
    "v1beta1Namespace": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "name could be in a format like: app/organization"
        },
        "metadata": {
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1beta1Organization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1beta1OrganizationRequestBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the organization. The name must be unique within the entire Shield instance. The name can contain only alphanumeric characters, dashes and underscores.\u003cbr/\u003e*Example:*`\"shield-org1-acme\"`"
        },
        "title": {
          "type": "string",
          "description": "The title can contain any UTF-8 character, used to provide a human-readable name for the organization. Can also be left empty.\u003cbr/\u003e *Example*: `\"Acme Inc\"`"
        },
        "metadata": {
          "type": "object",
          "description": "Metadata object for organizations that can hold key value pairs defined in Organization Metaschema. The metadata object can be used to store arbitrary information about the organization such as labels, descriptions etc. The default Organization Metaschema contains labels and descripton fields. Update the Organization Metaschema to add more fields. \u003cbr/\u003e*Example*:`{\"labels\": {\"key\": \"value\"}, \"description\": \"Organization description\"}`"
        }
      },
      "required": [
        "name"
      ]
    },
    "v1beta1Permission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "v1beta1Policy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "roleId": {
          "type": "string"
        },
        "resource": {
          "type": "string",
          "title": "namespace:uuid"
        },
        "principal": {
          "type": "string",
          "title": "namespace:uuid"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "v1beta1PolicyRequestBody": {
      "type": "object",
      "properties": {
        "roleId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "resource": {
          "type": "string",
          "title": "namespace:uuid"
        },
        "principal": {
          "type": "string",
          "title": "namespace:uuid"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "v1beta1Project": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "orgId": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1beta1ProjectRequestBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "orgId": {
          "type": "string"
        }
      }
    },
    "v1beta1Relation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "subjectSubRelation": {
          "type": "string"
        },
        "relation": {
          "type": "string"
        },
        "object": {
          "type": "string",
          "title": "objectnamespace:id"
        },
        "subject": {
          "type": "string",
          "title": "subjectnamespace:id"
        }
      }
    },
    "v1beta1RelationRequestBody": {
      "type": "object",
      "properties": {
        "object": {
          "type": "string",
          "title": "objectnamespace:uuid"
        },
        "subject": {
          "type": "string",
          "title": "subjectnamespace:uuid"
        },
        "relation": {
          "type": "string"
        },
        "subjectSubRelation": {
          "type": "string"
        }
      }
    },
    "v1beta1RemoveGroupUserResponse": {
      "type": "object"
    },
    "v1beta1RemoveOrganizationUserResponse": {
      "type": "object"
    },
    "v1beta1Resource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "urn": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "v1beta1ResourceRequestBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "v1beta1Role": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "orgId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1beta1RoleRequestBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "orgId": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "v1beta1UpdateCurrentUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1beta1User"
        }
      }
    },
    "v1beta1UpdateGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1beta1Group"
        }
      }
    },
    "v1beta1UpdateMetaSchemaResponse": {
      "type": "object",
      "properties": {
        "metaschema": {
          "$ref": "#/definitions/v1beta1MetaSchema"
        }
      }
    },
    "v1beta1UpdateOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/v1beta1Organization"
        }
      }
    },
    "v1beta1UpdateOrganizationRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/v1beta1Role"
        }
      }
    },
    "v1beta1UpdatePolicyResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Policy"
          }
        }
      }
    },
    "v1beta1UpdateProjectResourceResponse": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/v1beta1Resource"
        }
      }
    },
    "v1beta1UpdateProjectResponse": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/v1beta1Project"
        }
      }
    },
    "v1beta1UpdateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1beta1User"
        }
      }
    },
    "v1beta1User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "can either be empty or must start with a character"
        },
        "title": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1beta1UserRequestBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the user. The name must be unique within the entire Shield instance. The name can contain only alphanumeric characters, dashes and underscores and must start with a letter. If not provided, Shield automatically generates a name from the user email. "
        },
        "email": {
          "type": "string",
          "description": "The email of the user. The email must be unique within the entire Shield instance.\u003cbr/\u003e*Example:*`\"john.doe@odpf.io\"`"
        },
        "metadata": {
          "type": "object",
          "description": "Metadata object for users that can hold key value pairs pre-defined in User Metaschema. The metadata object can be used to store arbitrary information about the user such as label, description etc. By default the user metaschema contains labels and descriptions for the user. Update the same to add more fields to the user metadata object. \u003cbr/\u003e*Example:*`{\"label\": {\"key1\": \"value1\"}, \"description\": \"User Description\"}`"
        },
        "title": {
          "type": "string",
          "description": "The title can contain any UTF-8 character, used to provide a human-readable name for the user. Can also be left empty. \u003cbr/\u003e*Example:*`\"John Doe\"`"
        }
      },
      "required": [
        "email"
      ]
    }
  }
}
