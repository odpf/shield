{
  "swagger": "2.0",
  "info": {
    "title": "Shield Administration API",
    "version": "0.2.0"
  },
  "tags": [
    {
      "name": "AdminService"
    },
    {
      "name": "User"
    },
    {
      "name": "Group"
    },
    {
      "name": "Organization"
    },
    {
      "name": "Project"
    },
    {
      "name": "Relation"
    },
    {
      "name": "Resource"
    },
    {
      "name": "Policy"
    },
    {
      "name": "Role"
    },
    {
      "name": "Permission"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1beta1/admin/groups": {
      "get": {
        "summary": "Get all groups",
        "description": "Lists all the groups from all the organizations in a Shield instance. It can be filtered by organization and state.",
        "operationId": "AdminService_ListGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListGroupsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgId",
            "description": "The organization id to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "The state to filter by. It can be enabled or disabled.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ]
      }
    },
    "/v1beta1/admin/organizations": {
      "get": {
        "summary": "Get all organization",
        "description": "Lists all the organizations in a Shield instance. It can be filtered by user and state.",
        "operationId": "AdminService_ListAllOrganizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListAllOrganizationsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The user id to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "The state to filter by. It can be enabled or disabled.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1beta1/admin/projects": {
      "get": {
        "summary": "Get all project",
        "description": "Lists all the projects from all the organizations in a Shield instance. It can be filtered by organization and state.",
        "operationId": "AdminService_ListProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListProjectsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "description": "The organization id to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "The state to filter by. It can be enabled or disabled.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project"
        ]
      }
    },
    "/v1beta1/admin/relations": {
      "get": {
        "summary": "Get all relations",
        "operationId": "AdminService_ListRelations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListRelationsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Relation"
        ]
      }
    },
    "/v1beta1/admin/resources": {
      "get": {
        "summary": "Get all resources",
        "description": "Lists all the resources from all the organizations in a Shield instance. It can be filtered by user, project, organization and namespace.",
        "operationId": "AdminService_ListResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListResourcesResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The user id to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "description": "The project id to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organizationId",
            "description": "The organization id to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "The namespace to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Resource"
        ]
      }
    },
    "/v1beta1/admin/users": {
      "get": {
        "summary": "Get all users",
        "description": "Lists all the users from all the organizations in a Shield instance. It can be filtered by keyword, organization, group and state.",
        "operationId": "AdminService_ListAllUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListAllUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "The maximum number of users to return per page. The default is 50.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNum",
            "description": "The page number to return. The default is 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "keyword",
            "description": "The keyword to search for. It can be a user's name, email,metadata or id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgId",
            "description": "The organization id to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupId",
            "description": "The group id to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "The state to filter by. It can be enabled or disabled.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/v1beta1/permissions": {
      "post": {
        "summary": "Create permission",
        "description": "Creates a permission. It can be used to grant permissions to all the resources in a Shield instance.",
        "operationId": "AdminService_CreatePermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1CreatePermissionResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1CreatePermissionRequest"
            }
          }
        ],
        "tags": [
          "Permission"
        ]
      }
    },
    "/v1beta1/permissions/{id}": {
      "delete": {
        "summary": "Delete permission by ID",
        "operationId": "AdminService_DeletePermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DeletePermissionResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Permission"
        ]
      },
      "put": {
        "summary": "Update permission by ID",
        "description": "Updates a permission by ID. It can be used to grant permissions to all the resources in a Shield instance.",
        "operationId": "AdminService_UpdatePermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1UpdatePermissionResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1PermissionRequestBody"
            }
          }
        ],
        "tags": [
          "Permission"
        ]
      }
    },
    "/v1beta1/policies": {
      "get": {
        "summary": "Get all policies",
        "description": "Lists all the policies from all the organizations in a Shield instance. It can be filtered by organization, project, user, role and group.",
        "operationId": "AdminService_ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListPoliciesResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "description": "The organization id to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "description": "The project id to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "description": "The user id to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "roleId",
            "description": "The role id to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupId",
            "description": "The group id to filter by.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/v1beta1/roles": {
      "post": {
        "summary": "Create platform wide role",
        "description": "Creates a platform wide role. It can be used to grant permissions to all the resources in a Shield instance.",
        "operationId": "AdminService_CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1CreateRoleResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1RoleRequestBody"
            }
          }
        ],
        "tags": [
          "Role"
        ]
      }
    },
    "/v1beta1/roles/{id}": {
      "delete": {
        "summary": "Delete a role permanently forever and all of its relations",
        "operationId": "AdminService_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1DeleteRoleResponse"
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or contained invalid parameters.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to access the resource",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not Found - The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal Server Error. Returned when theres is something wrong with Shield server.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The role id to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Role"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1beta1CreatePermissionRequest": {
      "type": "object",
      "properties": {
        "bodies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1PermissionRequestBody"
          }
        }
      }
    },
    "v1beta1CreatePermissionResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Permission"
          }
        }
      }
    },
    "v1beta1CreateRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/v1beta1Role"
        }
      }
    },
    "v1beta1DeletePermissionResponse": {
      "type": "object"
    },
    "v1beta1DeleteRoleResponse": {
      "type": "object"
    },
    "v1beta1Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "orgId": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1beta1ListAllOrganizationsResponse": {
      "type": "object",
      "properties": {
        "organizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Organization"
          }
        }
      }
    },
    "v1beta1ListAllUsersResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1User"
          }
        }
      }
    },
    "v1beta1ListGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Group"
          }
        }
      }
    },
    "v1beta1ListPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Policy"
          }
        }
      }
    },
    "v1beta1ListProjectsResponse": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Project"
          }
        }
      }
    },
    "v1beta1ListRelationsResponse": {
      "type": "object",
      "properties": {
        "relations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Relation"
          }
        }
      }
    },
    "v1beta1ListResourcesResponse": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Resource"
          }
        }
      }
    },
    "v1beta1Organization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1beta1Permission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "v1beta1PermissionRequestBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the permission. It should be unique across a Shield instance and can contain only alphanumeric characters."
        },
        "namespace": {
          "type": "string",
          "description": "The namespace of the permission.The namespace should be in service/resource format.\u003cbr/\u003e*Example:*`app/guardian`",
          "title": "namespace should be in service/resource format"
        },
        "metadata": {
          "type": "object",
          "description": "The metadata object for permissions that can hold key value pairs."
        },
        "title": {
          "type": "string",
          "description": "The title can contain any UTF-8 character, used to provide a human-readable name for the permissions. Can also be left empty."
        }
      },
      "required": [
        "name",
        "namespace"
      ]
    },
    "v1beta1Policy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "roleId": {
          "type": "string"
        },
        "resource": {
          "type": "string",
          "title": "namespace:uuid"
        },
        "principal": {
          "type": "string",
          "title": "namespace:uuid"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "v1beta1Project": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "orgId": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1beta1Relation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "subjectSubRelation": {
          "type": "string"
        },
        "relation": {
          "type": "string"
        },
        "object": {
          "type": "string",
          "title": "objectnamespace:id"
        },
        "subject": {
          "type": "string",
          "title": "subjectnamespace:id"
        }
      }
    },
    "v1beta1Resource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "urn": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "v1beta1Role": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "orgId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1beta1RoleRequestBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "orgId": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "v1beta1UpdatePermissionResponse": {
      "type": "object",
      "properties": {
        "permission": {
          "$ref": "#/definitions/v1beta1Permission"
        }
      }
    },
    "v1beta1User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "can either be empty or must start with a character"
        },
        "title": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    }
  }
}
