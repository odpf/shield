// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	invitation "github.com/raystack/frontier/core/invitation"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Repository_Expecter) Delete(ctx interface{}, id interface{}) *Repository_Delete_Call {
	return &Repository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Repository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_Delete_Call) Return(_a0 error) *Repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *Repository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *Repository) Get(ctx context.Context, id uuid.UUID) (invitation.Invitation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 invitation.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (invitation.Invitation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) invitation.Invitation); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(invitation.Invitation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Repository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Repository_Expecter) Get(ctx interface{}, id interface{}) *Repository_Get_Call {
	return &Repository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *Repository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Repository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_Get_Call) Return(_a0 invitation.Invitation, _a1 error) *Repository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (invitation.Invitation, error)) *Repository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, flt
func (_m *Repository) List(ctx context.Context, flt invitation.Filter) ([]invitation.Invitation, error) {
	ret := _m.Called(ctx, flt)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []invitation.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, invitation.Filter) ([]invitation.Invitation, error)); ok {
		return rf(ctx, flt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, invitation.Filter) []invitation.Invitation); ok {
		r0 = rf(ctx, flt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invitation.Invitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, invitation.Filter) error); ok {
		r1 = rf(ctx, flt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Repository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - flt invitation.Filter
func (_e *Repository_Expecter) List(ctx interface{}, flt interface{}) *Repository_List_Call {
	return &Repository_List_Call{Call: _e.mock.On("List", ctx, flt)}
}

func (_c *Repository_List_Call) Run(run func(ctx context.Context, flt invitation.Filter)) *Repository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(invitation.Filter))
	})
	return _c
}

func (_c *Repository_List_Call) Return(_a0 []invitation.Invitation, _a1 error) *Repository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_List_Call) RunAndReturn(run func(context.Context, invitation.Filter) ([]invitation.Invitation, error)) *Repository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUser provides a mock function with given fields: ctx, id
func (_m *Repository) ListByUser(ctx context.Context, id string) ([]invitation.Invitation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ListByUser")
	}

	var r0 []invitation.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]invitation.Invitation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []invitation.Invitation); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invitation.Invitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ListByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUser'
type Repository_ListByUser_Call struct {
	*mock.Call
}

// ListByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Repository_Expecter) ListByUser(ctx interface{}, id interface{}) *Repository_ListByUser_Call {
	return &Repository_ListByUser_Call{Call: _e.mock.On("ListByUser", ctx, id)}
}

func (_c *Repository_ListByUser_Call) Run(run func(ctx context.Context, id string)) *Repository_ListByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_ListByUser_Call) Return(_a0 []invitation.Invitation, _a1 error) *Repository_ListByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ListByUser_Call) RunAndReturn(run func(context.Context, string) ([]invitation.Invitation, error)) *Repository_ListByUser_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, invite
func (_m *Repository) Set(ctx context.Context, invite invitation.Invitation) (invitation.Invitation, error) {
	ret := _m.Called(ctx, invite)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 invitation.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, invitation.Invitation) (invitation.Invitation, error)); ok {
		return rf(ctx, invite)
	}
	if rf, ok := ret.Get(0).(func(context.Context, invitation.Invitation) invitation.Invitation); ok {
		r0 = rf(ctx, invite)
	} else {
		r0 = ret.Get(0).(invitation.Invitation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, invitation.Invitation) error); ok {
		r1 = rf(ctx, invite)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Repository_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - invite invitation.Invitation
func (_e *Repository_Expecter) Set(ctx interface{}, invite interface{}) *Repository_Set_Call {
	return &Repository_Set_Call{Call: _e.mock.On("Set", ctx, invite)}
}

func (_c *Repository_Set_Call) Run(run func(ctx context.Context, invite invitation.Invitation)) *Repository_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(invitation.Invitation))
	})
	return _c
}

func (_c *Repository_Set_Call) Return(_a0 invitation.Invitation, _a1 error) *Repository_Set_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Set_Call) RunAndReturn(run func(context.Context, invitation.Invitation) (invitation.Invitation, error)) *Repository_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
