// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	group "github.com/raystack/frontier/core/group"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, grp
func (_m *Repository) Create(ctx context.Context, grp group.Group) (group.Group, error) {
	ret := _m.Called(ctx, grp)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, group.Group) (group.Group, error)); ok {
		return rf(ctx, grp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, group.Group) group.Group); ok {
		r0 = rf(ctx, grp)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, group.Group) error); ok {
		r1 = rf(ctx, grp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - grp group.Group
func (_e *Repository_Expecter) Create(ctx interface{}, grp interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", ctx, grp)}
}

func (_c *Repository_Create_Call) Run(run func(ctx context.Context, grp group.Group)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(group.Group))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 group.Group, _a1 error) *Repository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(context.Context, group.Group) (group.Group, error)) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Repository_Expecter) Delete(ctx interface{}, id interface{}) *Repository_Delete_Call {
	return &Repository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Repository_Delete_Call) Run(run func(ctx context.Context, id string)) *Repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_Delete_Call) Return(_a0 error) *Repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *Repository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetByID(ctx context.Context, id string) (group.Group, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (group.Group, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) group.Group); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type Repository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Repository_Expecter) GetByID(ctx interface{}, id interface{}) *Repository_GetByID_Call {
	return &Repository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *Repository_GetByID_Call) Run(run func(ctx context.Context, id string)) *Repository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetByID_Call) Return(_a0 group.Group, _a1 error) *Repository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetByID_Call) RunAndReturn(run func(context.Context, string) (group.Group, error)) *Repository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDs provides a mock function with given fields: ctx, groupIDs, flt
func (_m *Repository) GetByIDs(ctx context.Context, groupIDs []string, flt group.Filter) ([]group.Group, error) {
	ret := _m.Called(ctx, groupIDs, flt)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDs")
	}

	var r0 []group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, group.Filter) ([]group.Group, error)); ok {
		return rf(ctx, groupIDs, flt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, group.Filter) []group.Group); ok {
		r0 = rf(ctx, groupIDs, flt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]group.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, group.Filter) error); ok {
		r1 = rf(ctx, groupIDs, flt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDs'
type Repository_GetByIDs_Call struct {
	*mock.Call
}

// GetByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupIDs []string
//   - flt group.Filter
func (_e *Repository_Expecter) GetByIDs(ctx interface{}, groupIDs interface{}, flt interface{}) *Repository_GetByIDs_Call {
	return &Repository_GetByIDs_Call{Call: _e.mock.On("GetByIDs", ctx, groupIDs, flt)}
}

func (_c *Repository_GetByIDs_Call) Run(run func(ctx context.Context, groupIDs []string, flt group.Filter)) *Repository_GetByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(group.Filter))
	})
	return _c
}

func (_c *Repository_GetByIDs_Call) Return(_a0 []group.Group, _a1 error) *Repository_GetByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetByIDs_Call) RunAndReturn(run func(context.Context, []string, group.Filter) ([]group.Group, error)) *Repository_GetByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, flt
func (_m *Repository) List(ctx context.Context, flt group.Filter) ([]group.Group, error) {
	ret := _m.Called(ctx, flt)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, group.Filter) ([]group.Group, error)); ok {
		return rf(ctx, flt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, group.Filter) []group.Group); ok {
		r0 = rf(ctx, flt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]group.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, group.Filter) error); ok {
		r1 = rf(ctx, flt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Repository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - flt group.Filter
func (_e *Repository_Expecter) List(ctx interface{}, flt interface{}) *Repository_List_Call {
	return &Repository_List_Call{Call: _e.mock.On("List", ctx, flt)}
}

func (_c *Repository_List_Call) Run(run func(ctx context.Context, flt group.Filter)) *Repository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(group.Filter))
	})
	return _c
}

func (_c *Repository_List_Call) Return(_a0 []group.Group, _a1 error) *Repository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_List_Call) RunAndReturn(run func(context.Context, group.Filter) ([]group.Group, error)) *Repository_List_Call {
	_c.Call.Return(run)
	return _c
}

// SetState provides a mock function with given fields: ctx, id, state
func (_m *Repository) SetState(ctx context.Context, id string, state group.State) error {
	ret := _m.Called(ctx, id, state)

	if len(ret) == 0 {
		panic("no return value specified for SetState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, group.State) error); ok {
		r0 = rf(ctx, id, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_SetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetState'
type Repository_SetState_Call struct {
	*mock.Call
}

// SetState is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - state group.State
func (_e *Repository_Expecter) SetState(ctx interface{}, id interface{}, state interface{}) *Repository_SetState_Call {
	return &Repository_SetState_Call{Call: _e.mock.On("SetState", ctx, id, state)}
}

func (_c *Repository_SetState_Call) Run(run func(ctx context.Context, id string, state group.State)) *Repository_SetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(group.State))
	})
	return _c
}

func (_c *Repository_SetState_Call) Return(_a0 error) *Repository_SetState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_SetState_Call) RunAndReturn(run func(context.Context, string, group.State) error) *Repository_SetState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByID provides a mock function with given fields: ctx, toUpdate
func (_m *Repository) UpdateByID(ctx context.Context, toUpdate group.Group) (group.Group, error) {
	ret := _m.Called(ctx, toUpdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, group.Group) (group.Group, error)); ok {
		return rf(ctx, toUpdate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, group.Group) group.Group); ok {
		r0 = rf(ctx, toUpdate)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, group.Group) error); ok {
		r1 = rf(ctx, toUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_UpdateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByID'
type Repository_UpdateByID_Call struct {
	*mock.Call
}

// UpdateByID is a helper method to define mock.On call
//   - ctx context.Context
//   - toUpdate group.Group
func (_e *Repository_Expecter) UpdateByID(ctx interface{}, toUpdate interface{}) *Repository_UpdateByID_Call {
	return &Repository_UpdateByID_Call{Call: _e.mock.On("UpdateByID", ctx, toUpdate)}
}

func (_c *Repository_UpdateByID_Call) Run(run func(ctx context.Context, toUpdate group.Group)) *Repository_UpdateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(group.Group))
	})
	return _c
}

func (_c *Repository_UpdateByID_Call) Return(_a0 group.Group, _a1 error) *Repository_UpdateByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_UpdateByID_Call) RunAndReturn(run func(context.Context, group.Group) (group.Group, error)) *Repository_UpdateByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
