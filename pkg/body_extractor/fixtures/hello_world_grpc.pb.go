// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hello_test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloTestServiceClient is the client API for HelloTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloTestServiceClient interface {
	Greet(ctx context.Context, in *NestedMessageL0, opts ...grpc.CallOption) (*NestedMessageL0, error)
}

type helloTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloTestServiceClient(cc grpc.ClientConnInterface) HelloTestServiceClient {
	return &helloTestServiceClient{cc}
}

func (c *helloTestServiceClient) Greet(ctx context.Context, in *NestedMessageL0, opts ...grpc.CallOption) (*NestedMessageL0, error) {
	out := new(NestedMessageL0)
	err := c.cc.Invoke(ctx, "/hello.helloTestService/Greet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloTestServiceServer is the server API for HelloTestService service.
// All implementations must embed UnimplementedHelloTestServiceServer
// for forward compatibility
type HelloTestServiceServer interface {
	Greet(context.Context, *NestedMessageL0) (*NestedMessageL0, error)
	mustEmbedUnimplementedHelloTestServiceServer()
}

// UnimplementedHelloTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelloTestServiceServer struct {
}

func (UnimplementedHelloTestServiceServer) Greet(context.Context, *NestedMessageL0) (*NestedMessageL0, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedHelloTestServiceServer) mustEmbedUnimplementedHelloTestServiceServer() {}

// UnsafeHelloTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloTestServiceServer will
// result in compilation errors.
type UnsafeHelloTestServiceServer interface {
	mustEmbedUnimplementedHelloTestServiceServer()
}

func RegisterHelloTestServiceServer(s grpc.ServiceRegistrar, srv HelloTestServiceServer) {
	s.RegisterService(&HelloTestService_ServiceDesc, srv)
}

func _HelloTestService_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NestedMessageL0)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloTestServiceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.helloTestService/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloTestServiceServer).Greet(ctx, req.(*NestedMessageL0))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloTestService_ServiceDesc is the grpc.ServiceDesc for HelloTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.helloTestService",
	HandlerType: (*HelloTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _HelloTestService_Greet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/body_extractor/fixtures/hello_world.proto",
}
